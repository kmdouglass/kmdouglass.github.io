<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kyle M. Douglass (Posts about rust)</title><link>http://kmdouglass.github.io/</link><description></description><atom:link href="http://kmdouglass.github.io/categories/rust.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Tue, 26 Feb 2019 05:58:24 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>A simple UNIX socket listener in Rust</title><link>http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/</link><dc:creator>Kyle M. Douglass</dc:creator><description>&lt;div&gt;&lt;p&gt;I decided that I wanted to learn a new programming language in 2019. After a bit of research, I
settled upon &lt;a class="reference external" href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; due to its speed, novel ideas about memory safety, and &lt;a class="reference external" href="https://blog.rust-lang.org/2018/03/12/roadmap.html#four-target-domains"&gt;focus on two areas
that I am interested in&lt;/a&gt;: embedded systems and WebAssembly. While I think that &lt;a class="reference external" href="https://doc.rust-lang.org/book/"&gt;The Book&lt;/a&gt; is the
best place to get started learning the language, nothing is a really a substitute for writing
code.&lt;/p&gt;
&lt;p&gt;With that in mind, I developed an idea for a starting project: a background daemon for Linux
systems like the Raspberry Pi that controls and reads data from the system's peripherals. The
design of this project is inspired by Docker: a daemon process does most of the heavy work while a
command line tool communicates with the Daemon over a Unix socket (typically a file located at
&lt;tt class="docutils literal"&gt;/var/run/docker.sock&lt;/tt&gt;). The purpose of this post is to demonstrate the most basic realization of
this: reading text from a UNIX socket in Rust.&lt;/p&gt;
&lt;p&gt;To begin, I created a new Rust project with &lt;tt class="docutils literal"&gt;cargo&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_967f153616db408793a4970266cac833-1"&gt;&lt;/a&gt;$ cargo new rust-uds
&lt;a name="rest_code_967f153616db408793a4970266cac833-2"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; rust-uds
&lt;/pre&gt;&lt;p&gt;Next, I opened the file that cargo automatically generated in &lt;tt class="docutils literal"&gt;src/main.rs&lt;/tt&gt;, removed the
auto-generated content, and added the following code, which is largely taken from the &lt;a class="reference external" href="https://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#examples"&gt;example&lt;/a&gt;
provided in the Rust documentation:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-1"&gt; 1&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-2"&gt; 2&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-3"&gt; 3&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-4"&gt; 4&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-5"&gt; 5&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-6"&gt; 6&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-7"&gt; 7&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-8"&gt; 8&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-9"&gt; 9&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-10"&gt;10&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-11"&gt;11&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-12"&gt;12&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-13"&gt;13&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-14"&gt;14&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-15"&gt;15&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-16"&gt;16&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-17"&gt;17&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-18"&gt;18&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-19"&gt;19&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-20"&gt;20&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-21"&gt;21&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-22"&gt;22&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-23"&gt;23&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-24"&gt;24&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-25"&gt;25&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/#rest_code_819ca8e783174bd38b9c00c8c69b2689-26"&gt;26&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code rust"&gt;&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;io&lt;/span&gt;::&lt;span class="n"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;os&lt;/span&gt;::&lt;span class="n"&gt;unix&lt;/span&gt;::&lt;span class="n"&gt;net&lt;/span&gt;::&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;UnixStream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;UnixListener&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;handle_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;: &lt;span class="nc"&gt;UnixStream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-10"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-12"&gt;&lt;/a&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UnixListener&lt;/span&gt;::&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/tmp/rust-uds.sock"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-15"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;incoming&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-16"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-18"&gt;&lt;/a&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;::&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;handle_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-19"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-20"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-21"&gt;&lt;/a&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-22"&gt;&lt;/a&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-23"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-24"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-25"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_819ca8e783174bd38b9c00c8c69b2689-26"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="section" id="explanation"&gt;
&lt;h2&gt;Explanation&lt;/h2&gt;
&lt;p&gt;The first three lines import the necessary modules for this code example.&lt;/p&gt;
&lt;pre class="code rust"&gt;&lt;a name="rest_code_a86edaa15d044d909202b11d358b01e6-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;io&lt;/span&gt;::&lt;span class="n"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_a86edaa15d044d909202b11d358b01e6-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;os&lt;/span&gt;::&lt;span class="n"&gt;unix&lt;/span&gt;::&lt;span class="n"&gt;net&lt;/span&gt;::&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;UnixStream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;UnixListener&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_a86edaa15d044d909202b11d358b01e6-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;tt class="docutils literal"&gt;Read&lt;/tt&gt; is a trait that must be imported into the current scope to use the &lt;cite&gt;read_to_string()&lt;/cite&gt;
method. &lt;tt class="docutils literal"&gt;UnixStream&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;UnixListener&lt;/tt&gt; are structs that provide the functionality for handling
the UNIX socket, and the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;std::thread&lt;/span&gt;&lt;/tt&gt; module is used to spawn threads.&lt;/p&gt;
&lt;p&gt;The next set of lines defines a function named &lt;tt class="docutils literal"&gt;handle_client()&lt;/tt&gt; that is called whenever new data
arrives in the stream. The explanation for this is best left until after the &lt;tt class="docutils literal"&gt;main()&lt;/tt&gt; function.&lt;/p&gt;
&lt;p&gt;The first line in the &lt;tt class="docutils literal"&gt;main()&lt;/tt&gt; function creates the UnixListener struct and binds it to the
&lt;tt class="docutils literal"&gt;listener&lt;/tt&gt; variable.&lt;/p&gt;
&lt;pre class="code rust"&gt;&lt;a name="rest_code_03772faa925d480ca21401b3c0302685-1"&gt;&lt;/a&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UnixListener&lt;/span&gt;::&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/tmp/rust-uds.sock"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The &lt;tt class="docutils literal"&gt;bind()&lt;/tt&gt; function takes a string argument that is a path to the socket file and &lt;tt class="docutils literal"&gt;unwrap()&lt;/tt&gt;
moves the value out of the Option that is returned by &lt;tt class="docutils literal"&gt;bind()&lt;/tt&gt;. (This is a pattern that is
&lt;a class="reference external" href="https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap"&gt;discouraged&lt;/a&gt; in Rust but is OK for quick prototypes because it simplifies the error handling.)&lt;/p&gt;
&lt;p&gt;After creating the listener, &lt;tt class="docutils literal"&gt;listener.incoming()&lt;/tt&gt; returns an iterator over the incoming
connections to the socket. The connections are looped over in an infinite for loop; I believe that
this is more-or-less the same as a generator in Python which never raises a &lt;tt class="docutils literal"&gt;StopIteration&lt;/tt&gt;
exception.&lt;/p&gt;
&lt;p&gt;Next, the &lt;tt class="docutils literal"&gt;Result&lt;/tt&gt; of the incoming streams is matched; if there is an error, it is printed and
the loop it exited:&lt;/p&gt;
&lt;pre class="code rust"&gt;&lt;a name="rest_code_594d1ee5ee624166938771045c5c3783-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_594d1ee5ee624166938771045c5c3783-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_594d1ee5ee624166938771045c5c3783-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_594d1ee5ee624166938771045c5c3783-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;However, if the &lt;tt class="docutils literal"&gt;Result&lt;/tt&gt; of the connection is &lt;tt class="docutils literal"&gt;Ok&lt;/tt&gt;, then a new thread is spawned to handle the
new stream:&lt;/p&gt;
&lt;pre class="code rust"&gt;&lt;a name="rest_code_3c5d994a0b604c3494e9e1222d3edcb1-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_3c5d994a0b604c3494e9e1222d3edcb1-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;::&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;handle_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_3c5d994a0b604c3494e9e1222d3edcb1-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I had to add the &lt;tt class="docutils literal"&gt;move&lt;/tt&gt; keyword to the argument of &lt;tt class="docutils literal"&gt;thread.spawn()&lt;/tt&gt; to make the compiler
happy. The reason is that the argument to the client handler is mutable, which I think means that
it needs to take ownership of the stream. (See the documentation &lt;a class="reference external" href="https://doc.rust-lang.org/book/ch16-01-threads.html#using-move-closures-with-threads"&gt;here&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Finally, the client handler is called for each connection.&lt;/p&gt;
&lt;pre class="code rust"&gt;&lt;a name="rest_code_c19dccf207d44ba1bb8eeff2ea101fe9-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;handle_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;: &lt;span class="nc"&gt;UnixStream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c19dccf207d44ba1bb8eeff2ea101fe9-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c19dccf207d44ba1bb8eeff2ea101fe9-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_c19dccf207d44ba1bb8eeff2ea101fe9-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c19dccf207d44ba1bb8eeff2ea101fe9-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c19dccf207d44ba1bb8eeff2ea101fe9-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The handler in this case is fairly straight-forward. The response is stored in a mutable string
which we extract from the stream and printed to terminal.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>linux</category><category>rust</category><guid>http://kmdouglass.github.io/posts/a-simple-unix-socket-listener-in-rust/</guid><pubDate>Sun, 24 Feb 2019 15:25:58 GMT</pubDate></item></channel></rss>