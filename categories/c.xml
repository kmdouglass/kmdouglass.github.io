<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kyle M. Douglass (Posts about c)</title><link>http://kmdouglass.github.io/</link><description></description><atom:link href="http://kmdouglass.github.io/categories/c.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 16 Jun 2019 10:11:08 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>A simple plugin interface for the Rust FFI</title><link>http://kmdouglass.github.io/posts/a-simple-plugin-interface-for-the-rust-ffi/</link><dc:creator>Kyle M. Douglass</dc:creator><description>&lt;div&gt;&lt;p&gt;In a recent post I explored &lt;a class="reference external" href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/"&gt;how to pass complex datatypes through the Rust FFI&lt;/a&gt;. (The FFI is the
foreign function interface, a part of the Rust language for calling code written in other
languages.)&lt;/p&gt;
&lt;p&gt;I am exploring the Rust FFI because I want to use it in &lt;a class="reference external" href="https://github.com/kmdouglass/kpal"&gt;a small web application&lt;/a&gt; that I am
writing and that will be used to interact with hardware peripherals connected to a system on a chip
(SoC). One use-case that I have in mind is to monitor readings from moisture and temperature
sensors implanted in the soil of my houseplants. In many cases the general purpose input/output
(GPIO) pins of a SoC are controlled through a C library such as &lt;a class="reference external" href="http://wiringpi.com"&gt;WiringPi&lt;/a&gt; for the Raspberry Pi,
which means my monitoring system needs to interface with C libraries such as this one.&lt;/p&gt;
&lt;p&gt;In this post I will describe my current understanding for how best to integrate C-language plugins
with a Rust application. I have omitted all application-specific logic from the example and will
instead focus on the design of the plugin interface itself.&lt;/p&gt;
&lt;p&gt;You may find &lt;a class="reference external" href="https://github.com/kmdouglass/rust-libloading-example"&gt;the source code for this post here&lt;/a&gt;. I was heavily inspired by both the &lt;a class="reference external" href="http://jakegoulding.com/rust-ffi-omnibus/"&gt;Rust FFI
Omnibus&lt;/a&gt; and &lt;a class="reference external" href="https://michael-f-bryan.github.io/rust-ffi-guide/"&gt;The (unofficial) Rust FFI Guide&lt;/a&gt;. This post was written using version 1.35.0 of the
Rust compiler.&lt;/p&gt;
&lt;div class="section" id="the-c-plugin"&gt;
&lt;h2&gt;The C plugin&lt;/h2&gt;
&lt;p&gt;I wrote a very simple of C library that is located in the &lt;a class="reference external" href="https://github.com/kmdouglass/rust-libloading-example/tree/master/ffi-test"&gt;ffi-test&lt;/a&gt; folder of the example
repository and that will serve the purpose of this demonstration. It consists of two source files
(&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ffi-test.c&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ffi-test.h&lt;/span&gt;&lt;/tt&gt;) and a &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt;. The plugin's interface is defined as usual
in the header file:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="http://kmdouglass.github.io/posts/a-simple-plugin-interface-for-the-rust-ffi/#rest_code_e01c92327d554f7c81b24936c594d3a6-1"&gt; 1&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-plugin-interface-for-the-rust-ffi/#rest_code_e01c92327d554f7c81b24936c594d3a6-2"&gt; 2&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-plugin-interface-for-the-rust-ffi/#rest_code_e01c92327d554f7c81b24936c594d3a6-3"&gt; 3&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-plugin-interface-for-the-rust-ffi/#rest_code_e01c92327d554f7c81b24936c594d3a6-4"&gt; 4&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-plugin-interface-for-the-rust-ffi/#rest_code_e01c92327d554f7c81b24936c594d3a6-5"&gt; 5&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-plugin-interface-for-the-rust-ffi/#rest_code_e01c92327d554f7c81b24936c594d3a6-6"&gt; 6&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-plugin-interface-for-the-rust-ffi/#rest_code_e01c92327d554f7c81b24936c594d3a6-7"&gt; 7&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-plugin-interface-for-the-rust-ffi/#rest_code_e01c92327d554f7c81b24936c594d3a6-8"&gt; 8&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-plugin-interface-for-the-rust-ffi/#rest_code_e01c92327d554f7c81b24936c594d3a6-9"&gt; 9&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-plugin-interface-for-the-rust-ffi/#rest_code_e01c92327d554f7c81b24936c594d3a6-10"&gt;10&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-plugin-interface-for-the-rust-ffi/#rest_code_e01c92327d554f7c81b24936c594d3a6-11"&gt;11&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-plugin-interface-for-the-rust-ffi/#rest_code_e01c92327d554f7c81b24936c594d3a6-12"&gt;12&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-plugin-interface-for-the-rust-ffi/#rest_code_e01c92327d554f7c81b24936c594d3a6-13"&gt;13&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-plugin-interface-for-the-rust-ffi/#rest_code_e01c92327d554f7c81b24936c594d3a6-14"&gt;14&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/a-simple-plugin-interface-for-the-rust-ffi/#rest_code_e01c92327d554f7c81b24936c594d3a6-15"&gt;15&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code c"&gt;&lt;a name="rest_code_e01c92327d554f7c81b24936c594d3a6-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#ifndef FFI_TEST_H&lt;/span&gt;
&lt;a name="rest_code_e01c92327d554f7c81b24936c594d3a6-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define FFI_TEST_H&lt;/span&gt;
&lt;a name="rest_code_e01c92327d554f7c81b24936c594d3a6-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_e01c92327d554f7c81b24936c594d3a6-4"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_e01c92327d554f7c81b24936c594d3a6-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_e01c92327d554f7c81b24936c594d3a6-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_e01c92327d554f7c81b24936c594d3a6-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_e01c92327d554f7c81b24936c594d3a6-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_e01c92327d554f7c81b24936c594d3a6-9"&gt;&lt;/a&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;free_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_e01c92327d554f7c81b24936c594d3a6-10"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;get_api_version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_e01c92327d554f7c81b24936c594d3a6-11"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;get_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_e01c92327d554f7c81b24936c594d3a6-12"&gt;&lt;/a&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;set_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_e01c92327d554f7c81b24936c594d3a6-13"&gt;&lt;/a&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="nf"&gt;sizeof_obj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_e01c92327d554f7c81b24936c594d3a6-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_e01c92327d554f7c81b24936c594d3a6-15"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#endif &lt;/span&gt;&lt;span class="cm"&gt;/* FFI_TEST_H */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;In particular, there is an opaque struct that is declared by the line &lt;code&gt;struct object;&lt;/code&gt;. (An
opaque struct is a struct whose definition is hidden from the public API; the definition is
provided in the file &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ffi-test.c&lt;/span&gt;&lt;/tt&gt;.) This object will hold the data for our plugin, but, because
it is opaque, we will only be able to interact with it through functions such as &lt;tt class="docutils literal"&gt;init&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;free_object&lt;/tt&gt;, etc. that are provided by the API.&lt;/p&gt;
&lt;p&gt;To build the C library on UNIX-like systems, simply execute the &lt;tt class="docutils literal"&gt;make&lt;/tt&gt; command from within the
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ffi-test&lt;/span&gt;&lt;/tt&gt; library.&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_4a6c677f5eba476999420b96766ac2c5-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; make
&lt;a name="rest_code_4a6c677f5eba476999420b96766ac2c5-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;gcc -c -o libffi-test.o -fpic ffi-test.c -Wall -Werror&lt;/span&gt;
&lt;a name="rest_code_4a6c677f5eba476999420b96766ac2c5-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;gcc -shared -o libffi-test.so libffi-test.o&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-rust-c-plugin-interface"&gt;
&lt;h2&gt;The Rust-C plugin interface&lt;/h2&gt;
&lt;p&gt;The Rust code is contained in one source file, &lt;a class="reference external" href="https://github.com/kmdouglass/rust-libloading-example/blob/master/src/main.rs"&gt;src/main.rs&lt;/a&gt;. The design pattern contained within
consists of three kinds of objects:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;type definitions for the functions in the C library&lt;/li&gt;
&lt;li&gt;a &lt;tt class="docutils literal"&gt;VTable&lt;/tt&gt; struct that holds the external function types&lt;/li&gt;
&lt;li&gt;a &lt;tt class="docutils literal"&gt;Plugin&lt;/tt&gt; struct that holds the plugin's library, the &lt;tt class="docutils literal"&gt;VTable&lt;/tt&gt;, and a raw pointer to the
object provided by the C library&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's take a look at each of these abstractions.&lt;/p&gt;
&lt;div class="section" id="external-function-types"&gt;
&lt;h3&gt;External function types&lt;/h3&gt;
&lt;p&gt;The external function types are defined as follows:&lt;/p&gt;
&lt;pre class="code rust"&gt;&lt;a name="rest_code_dee977936591438b98705d26e078ca6a-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#[repr(C)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_dee977936591438b98705d26e078ca6a-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_dee977936591438b98705d26e078ca6a-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;_private&lt;/span&gt;: &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;u8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_dee977936591438b98705d26e078ca6a-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_dee977936591438b98705d26e078ca6a-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;FreeObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"C"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_dee977936591438b98705d26e078ca6a-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Init&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"C"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_dee977936591438b98705d26e078ca6a-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;GetApiVersion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"C"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;c_int&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_dee977936591438b98705d26e078ca6a-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;GetInfo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"C"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;c_int&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_dee977936591438b98705d26e078ca6a-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;SetInfo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"C"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c_int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The opaque struct from the C library is represented as rust &lt;tt class="docutils literal"&gt;struct&lt;/tt&gt; with a single, private field
containing an empty array. &lt;a class="reference external" href="https://doc.rust-lang.org/nomicon/ffi.html#representing-opaque-structs"&gt;This is currently the recommended way&lt;/a&gt; to represent opaque structs in
the Rust FFI. Following the &lt;tt class="docutils literal"&gt;struct&lt;/tt&gt; definition are the type definitions for the foreign
functions.&lt;/p&gt;
&lt;pre class="code rust"&gt;&lt;a name="rest_code_af8313bbad0649ed977070a1f74fe18c-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;FreeObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"C"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_af8313bbad0649ed977070a1f74fe18c-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Init&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"C"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_af8313bbad0649ed977070a1f74fe18c-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;For example, the &lt;tt class="docutils literal"&gt;Init&lt;/tt&gt; type represents a foreign C function that takes no arguments and returns
a mutable raw pointer to an &lt;tt class="docutils literal"&gt;Object&lt;/tt&gt; instance. This function type therefore represents the
&lt;tt class="docutils literal"&gt;Object&lt;/tt&gt; constructor in Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-vtable"&gt;
&lt;h3&gt;The VTable&lt;/h3&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;VTable&lt;/tt&gt; serves as a way to collect the types associated with the C library functions into
one place. Furthermore, I added a version number to make it &lt;tt class="docutils literal"&gt;VTableV0&lt;/tt&gt;. The purpose in doing this
is to easily maintain backwards compatability with and follow changes to the C API.&lt;/p&gt;
&lt;p&gt;By looking at its definition, you can see that it contains a few &lt;tt class="docutils literal"&gt;RawSymbol&lt;/tt&gt; instances:&lt;/p&gt;
&lt;pre class="code rust"&gt;&lt;a name="rest_code_2a8e26df8c514068bdd0815625a10613-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;VTableV0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_2a8e26df8c514068bdd0815625a10613-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;free_object&lt;/span&gt;: &lt;span class="nc"&gt;RawSymbol&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FreeObject&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_2a8e26df8c514068bdd0815625a10613-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;get_info&lt;/span&gt;: &lt;span class="nc"&gt;RawSymbol&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GetInfo&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_2a8e26df8c514068bdd0815625a10613-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;set_info&lt;/span&gt;: &lt;span class="nc"&gt;RawSymbol&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SetInfo&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_2a8e26df8c514068bdd0815625a10613-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;A &lt;tt class="docutils literal"&gt;RawSymbol&lt;/tt&gt; is a name that I gave to Unix-specific symbols from the &lt;tt class="docutils literal"&gt;libloading&lt;/tt&gt; Rust
library. (See the &lt;tt class="docutils literal"&gt;use&lt;/tt&gt; statements at the top of the source code file.) I am not storing plain
&lt;tt class="docutils literal"&gt;Symbols&lt;/tt&gt; from that library inside the VTable because the lifetime constraints associated with
plain &lt;tt class="docutils literal"&gt;Symbols&lt;/tt&gt; and their corresponding &lt;tt class="docutils literal"&gt;Library&lt;/tt&gt; do not allow me to take ownership of them
inside the struct. (You can find a few attempts in the commit history of this repository where I
tried to own plain &lt;tt class="docutils literal"&gt;Symbols&lt;/tt&gt;; none of these attempts would compile.)&lt;/p&gt;
&lt;p&gt;Instead, if I had used a plain &lt;tt class="docutils literal"&gt;Symbol&lt;/tt&gt;, then I would have had to lookup the symbols inside the C
library each time that I wanted to call them.&lt;/p&gt;
&lt;p&gt;The way to obtain &lt;tt class="docutils literal"&gt;RawSymbols&lt;/tt&gt; is to use the &lt;tt class="docutils literal"&gt;into_raw&lt;/tt&gt; method of a plain &lt;tt class="docutils literal"&gt;Symbol&lt;/tt&gt;. You can
find an example of this inside the &lt;tt class="docutils literal"&gt;VTable&lt;/tt&gt;'s constructor:&lt;/p&gt;
&lt;pre class="code rust"&gt;&lt;a name="rest_code_24689496daa145458f94573be8ec8abf-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;unsafe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;library&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;Library&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;VTableV0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_24689496daa145458f94573be8ec8abf-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Loading API version 0..."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_24689496daa145458f94573be8ec8abf-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;free_object&lt;/span&gt;: &lt;span class="nc"&gt;Symbol&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FreeObject&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;library&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;b"free_object&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_24689496daa145458f94573be8ec8abf-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;free_object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;free_object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into_raw&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_24689496daa145458f94573be8ec8abf-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;First, the &lt;tt class="docutils literal"&gt;free_object&lt;/tt&gt; &lt;tt class="docutils literal"&gt;Symbol&lt;/tt&gt; is imported from the library using the &lt;tt class="docutils literal"&gt;get()&lt;/tt&gt; method from
the library, then it is converted to a &lt;tt class="docutils literal"&gt;RawSymbol&lt;/tt&gt; in the following line so that it can be stored
inside the &lt;tt class="docutils literal"&gt;VTableV0&lt;/tt&gt; struct that is returned by the constructor. The whole function is marked as
&lt;tt class="docutils literal"&gt;unsafe&lt;/tt&gt; because of the multiple calls to the &lt;tt class="docutils literal"&gt;get&lt;/tt&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-plugin"&gt;
&lt;h3&gt;The Plugin&lt;/h3&gt;
&lt;p&gt;Finally we reach the top of the hierarchy of the components that comprise this design, the
&lt;tt class="docutils literal"&gt;Plugin&lt;/tt&gt; struct. Its implementation follows:&lt;/p&gt;
&lt;pre class="code rust"&gt;&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Plugin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#[allow(dead_code)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;library&lt;/span&gt;: &lt;span class="nc"&gt;Library&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;: &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;vtable&lt;/span&gt;: &lt;span class="nc"&gt;VTableV0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Plugin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;unsafe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;library_name&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;OsStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;Plugin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;library&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;library_name&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get_api_version&lt;/span&gt;: &lt;span class="nc"&gt;Symbol&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GetApiVersion&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;library&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;b"get_api_version&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vtable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get_api_version&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VTableV0&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;library&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;panic&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unrecognized C API version number."&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-15"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;: &lt;span class="nc"&gt;Symbol&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Init&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;library&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;b"init&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-18"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;: &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-19"&gt;&lt;/a&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-20"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Plugin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-21"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;library&lt;/span&gt;: &lt;span class="nc"&gt;library&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-22"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;: &lt;span class="nc"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-23"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;vtable&lt;/span&gt;: &lt;span class="nc"&gt;vtable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-24"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-25"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-26"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-27"&gt;&lt;/a&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-28"&gt;&lt;/a&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Drop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Plugin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-29"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-30"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vtable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;free_object&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-31"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1a91d8a2fdf947088668fac83beca098-32"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The interesting parts here are the &lt;tt class="docutils literal"&gt;Plugin&lt;/tt&gt;'s constructor &lt;tt class="docutils literal"&gt;new&lt;/tt&gt; and the implementation of the
&lt;tt class="docutils literal"&gt;Drop&lt;/tt&gt; trait. After loading the library, the constructor calls the C library function that
returns its API version; if the version matches one for which we have a &lt;tt class="docutils literal"&gt;VTable&lt;/tt&gt;, then we create
the new &lt;tt class="docutils literal"&gt;VTable&lt;/tt&gt;. Next, we instantiate an &lt;tt class="docutils literal"&gt;Object&lt;/tt&gt; by calling its constructor to obtain a raw
pointer to it.&lt;/p&gt;
&lt;pre class="code rust"&gt;&lt;a name="rest_code_0ef66b531298438fbde7434d0cf7e23f-1"&gt;&lt;/a&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;: &lt;span class="nc"&gt;Symbol&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Init&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;library&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;b"init&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_0ef66b531298438fbde7434d0cf7e23f-2"&gt;&lt;/a&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;: &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The constructor packs the library, the &lt;tt class="docutils literal"&gt;VTable&lt;/tt&gt;, and the object pointer into a new &lt;tt class="docutils literal"&gt;Plugin&lt;/tt&gt;
struct and returns it.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;Drop&lt;/tt&gt; trait implementation is used to automatically free the memory that has been allocated
when the pointer held by the &lt;tt class="docutils literal"&gt;Plugin&lt;/tt&gt; struct goes out-of-scope. It does this by calling the
&lt;tt class="docutils literal"&gt;free_object&lt;/tt&gt; method in the VTable.&lt;/p&gt;
&lt;pre class="code rust"&gt;&lt;a name="rest_code_f834ee57c18045c3871fd83ecf5c11a0-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Drop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Plugin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_f834ee57c18045c3871fd83ecf5c11a0-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_f834ee57c18045c3871fd83ecf5c11a0-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vtable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;free_object&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_f834ee57c18045c3871fd83ecf5c11a0-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_f834ee57c18045c3871fd83ecf5c11a0-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="running-the-example"&gt;
&lt;h3&gt;Running the example&lt;/h3&gt;
&lt;p&gt;To run the example, run the following commands from the root directory of the example repository.&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_19e67fb939614723b78bf5fd57ae0d9a-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cargo build
&lt;a name="rest_code_19e67fb939614723b78bf5fd57ae0d9a-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;Compiling rust-libloading v0.1.0 (/home/kmdouglass/src/rust-libloading-example)&lt;/span&gt;
&lt;a name="rest_code_19e67fb939614723b78bf5fd57ae0d9a-3"&gt;&lt;/a&gt;&lt;span class="go"&gt; Finished dev [unoptimized + debuginfo] target(s) in 0.27s&lt;/span&gt;
&lt;a name="rest_code_19e67fb939614723b78bf5fd57ae0d9a-4"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cargo run
&lt;a name="rest_code_19e67fb939614723b78bf5fd57ae0d9a-5"&gt;&lt;/a&gt;&lt;span class="go"&gt; Finished dev [unoptimized + debuginfo] target(s) in 0.01s&lt;/span&gt;
&lt;a name="rest_code_19e67fb939614723b78bf5fd57ae0d9a-6"&gt;&lt;/a&gt;&lt;span class="go"&gt;  Running `target/debug/rust-libloading`&lt;/span&gt;
&lt;a name="rest_code_19e67fb939614723b78bf5fd57ae0d9a-7"&gt;&lt;/a&gt;&lt;span class="go"&gt;Loading API version 0...&lt;/span&gt;
&lt;a name="rest_code_19e67fb939614723b78bf5fd57ae0d9a-8"&gt;&lt;/a&gt;&lt;span class="go"&gt;Original value: 0&lt;/span&gt;
&lt;a name="rest_code_19e67fb939614723b78bf5fd57ae0d9a-9"&gt;&lt;/a&gt;&lt;span class="go"&gt;New value: 42&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The &lt;tt class="docutils literal"&gt;main&lt;/tt&gt; method of the Rust code creates the plugin, prints the default value of the data held
by the object (which is instantiated by the C library), and then mutates the data to the value
&lt;tt class="docutils literal"&gt;42&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;It then prints this value, demonstrating that the FFI calls work.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="discussion"&gt;
&lt;h2&gt;Discussion&lt;/h2&gt;
&lt;p&gt;The most difficult part of developing this design was finding a way to own the symbols exposed by
the plugin library. For me, it was not completely evident from the &lt;a class="reference external" href="https://docs.rs/libloading/0.5.1/libloading/"&gt;libloading documentation&lt;/a&gt; that
this was the purpose of the &lt;tt class="docutils literal"&gt;into_raw&lt;/tt&gt; method on a &lt;tt class="docutils literal"&gt;Symbol&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;What I like about this design is that the whole plugin interface fits nicely within a simple
hierarchy with a collection of foreign method types at its base. It also supports changes to the C
API because a new &lt;tt class="docutils literal"&gt;VTable&lt;/tt&gt; can be created each time the API changes.&lt;/p&gt;
&lt;p&gt;One current disadvantage of the design is that &lt;tt class="docutils literal"&gt;free_object&lt;/tt&gt; is exposed through the VTable. I
think that this opens the possibility for a double-free error. One way to prevent this is to hide
the &lt;tt class="docutils literal"&gt;free_object&lt;/tt&gt; method, loading its corresponding symbol only when the &lt;tt class="docutils literal"&gt;drop&lt;/tt&gt; method is
called.&lt;/p&gt;
&lt;p&gt;Another disadvantage of this design is that it relies on the particular C API exposed by the
library. C programmers have a large amount of freedom in designing APIs for their libraries. They
are not forced to use opaque structs or to version their APIs. As a result, I don't believe that
the plugin design presented here can be completely generalized to any C library.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;Plugin&lt;/tt&gt; struct is almost certainly not thread safe. To make it thread safe, it may be
necessary to wrap the raw pointer in a &lt;tt class="docutils literal"&gt;Mutex&lt;/tt&gt;. It may even be simpler to wrap the entire struct
in a &lt;tt class="docutils literal"&gt;Mutex&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Finally, owning raw symbols is not platform independent. You can see at the top of the Rust source
code that I am importing the &lt;tt class="docutils literal"&gt;Symbol&lt;/tt&gt; object specific to UNIX systems. One would need to change
this if it was intended to work on Windows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I presented a design pattern for managing C-language plugins in Rust.&lt;/li&gt;
&lt;li&gt;The design pattern consists of a collection of foreign object function types, the
&lt;tt class="docutils literal"&gt;VTable&lt;/tt&gt;. This collection is part of a larger collection which owns pointers to the opaque data
types exposed by the library, as well as the plugin library itself.&lt;/li&gt;
&lt;li&gt;The trick to owning symbols (instead of looking them up in the library each time you want to use
them), is use &lt;tt class="docutils literal"&gt;into_raw&lt;/tt&gt; method that is implemented on libloading's &lt;tt class="docutils literal"&gt;Symbol&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;This design cannot be completely generalized to any C library, but should provide a good starting
point to work with FFI plugins in Rust.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>c</category><category>rust</category><guid>http://kmdouglass.github.io/posts/a-simple-plugin-interface-for-the-rust-ffi/</guid><pubDate>Sun, 16 Jun 2019 07:33:33 GMT</pubDate></item><item><title>Complex data types and the Rust FFI</title><link>http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/</link><dc:creator>Kyle M. Douglass</dc:creator><description>&lt;div&gt;&lt;p&gt;The &lt;a class="reference external" href="https://doc.rust-lang.org/nomicon/ffi.html"&gt;Rust Foreign Function Interface&lt;/a&gt; (FFI, for short) is a feature of Rust that enables the
sharing of data and functions between parts of code that have been written in different
languages. I am interested in the FFI because many libraries used in embedded systems are written
in C, and I would like to leverage them for my embedded work with Rust.&lt;/p&gt;
&lt;p&gt;I quickly learned from my initial experiments with the Rust FFI that one of its challenges is
casting data types into a form that may be consumed by other languages. This challenge is not
unique to the Rust FFI, and there are numerous reasons for it. For one, different languages use
different mechanisms to layout data in the computer's memory. What's more, names for functions and
data types are often mangled, which means that the symbol in a library that maps to a function may
be different than the name that you give to the function in your code. As far as I know, C
compilers do not mangle symbol names, and partly for this reason the C language is often used as an
intermediary language in FFIs. Converting Rust to C is therefore an important skill when using Rust
for multi-language work.&lt;/p&gt;
&lt;p&gt;There are a few good resources on the internet about using the Rust FFI to expose functions written
in Rust to other languages. However, I found little information about passing data types between
languages. To help remedy this situation, I describe in this post a simple Rust library that I
wrote to explore how to pass complex data types from Rust to C.&lt;/p&gt;
&lt;div class="section" id="an-example-ffi-project"&gt;
&lt;h2&gt;An example FFI project&lt;/h2&gt;
&lt;p&gt;I created the Rust library in the typical way by first starting a new project with Cargo:&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_372b84d1c7254bbaa80260de2378dbce-1"&gt;&lt;/a&gt;$ cargo new --lib rstruct
&lt;a name="rest_code_372b84d1c7254bbaa80260de2378dbce-2"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; rstruct
&lt;/pre&gt;&lt;p&gt;Inside, I modified the contents of &lt;tt class="docutils literal"&gt;Cargo.toml&lt;/tt&gt; to the following:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_5fbba1c3a9fd47cd91f5cd370105ecf6-1"&gt;&lt;/a&gt;[package]
&lt;a name="rest_code_5fbba1c3a9fd47cd91f5cd370105ecf6-2"&gt;&lt;/a&gt;name = "rstruct"
&lt;a name="rest_code_5fbba1c3a9fd47cd91f5cd370105ecf6-3"&gt;&lt;/a&gt;version = "0.1.0"
&lt;a name="rest_code_5fbba1c3a9fd47cd91f5cd370105ecf6-4"&gt;&lt;/a&gt;authors = ["Kyle M. Douglass"]
&lt;a name="rest_code_5fbba1c3a9fd47cd91f5cd370105ecf6-5"&gt;&lt;/a&gt;edition = "2018"
&lt;a name="rest_code_5fbba1c3a9fd47cd91f5cd370105ecf6-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_5fbba1c3a9fd47cd91f5cd370105ecf6-7"&gt;&lt;/a&gt;[lib]
&lt;a name="rest_code_5fbba1c3a9fd47cd91f5cd370105ecf6-8"&gt;&lt;/a&gt;crate-type = ["cdylib"]
&lt;a name="rest_code_5fbba1c3a9fd47cd91f5cd370105ecf6-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_5fbba1c3a9fd47cd91f5cd370105ecf6-10"&gt;&lt;/a&gt;[dependencies]
&lt;/pre&gt;&lt;p&gt;The only lines that I added were &lt;tt class="docutils literal"&gt;[lib]&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;crate-type&lt;/span&gt; = ["cdylib"]&lt;/tt&gt;. As described in the
&lt;a class="reference external" href="https://doc.rust-lang.org/edition-guide/rust-2018/platform-and-target-support/cdylib-crates-for-c-interoperability.html"&gt;2018 edition guide&lt;/a&gt;, this type of crate produces a binary that has no Rust-specific information
in it and is intended for use through a C FFI.&lt;/p&gt;
&lt;p&gt;Next, I opened the &lt;tt class="docutils literal"&gt;src/lib.rs&lt;/tt&gt; source file, removed the auto-generated content, and added the
following source.&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-1"&gt; 1&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-2"&gt; 2&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-3"&gt; 3&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-4"&gt; 4&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-5"&gt; 5&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-6"&gt; 6&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-7"&gt; 7&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-8"&gt; 8&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-9"&gt; 9&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-10"&gt;10&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-11"&gt;11&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-12"&gt;12&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-13"&gt;13&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-14"&gt;14&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-15"&gt;15&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-16"&gt;16&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-17"&gt;17&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-18"&gt;18&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-19"&gt;19&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-20"&gt;20&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-21"&gt;21&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-22"&gt;22&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-23"&gt;23&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-24"&gt;24&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-25"&gt;25&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-26"&gt;26&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-27"&gt;27&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-28"&gt;28&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-29"&gt;29&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-30"&gt;30&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-31"&gt;31&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-32"&gt;32&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-33"&gt;33&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-34"&gt;34&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-35"&gt;35&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-36"&gt;36&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_d724c2d6c3244a979b169b4a559585b7-37"&gt;37&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code rust"&gt;&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;boxed&lt;/span&gt;::&lt;span class="nb"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;ffi&lt;/span&gt;::&lt;span class="n"&gt;CString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="n"&gt;os&lt;/span&gt;::&lt;span class="n"&gt;raw&lt;/span&gt;::&lt;span class="n"&gt;c_char&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-5"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#[repr(C)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;RStruct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;: &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c_char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;: &lt;span class="nc"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-11"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#[repr(C)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-12"&gt;&lt;/a&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;Value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;_Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;_Float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-15"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-17"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#[no_mangle]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-18"&gt;&lt;/a&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"C"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;data_new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RStruct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-19"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Inside data_new()."&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-21"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;Box&lt;/span&gt;::&lt;span class="n"&gt;into_raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Box&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RStruct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-22"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;: &lt;span class="nc"&gt;CString&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"my_rstruct"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-23"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error: CString::new()"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-24"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into_raw&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-25"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;: &lt;span class="nc"&gt;Value&lt;/span&gt;::&lt;span class="n"&gt;_Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-26"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-27"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-28"&gt;&lt;/a&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-29"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#[no_mangle]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-30"&gt;&lt;/a&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"C"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;data_free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;: &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RStruct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-31"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_null&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-32"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-33"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-34"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;unsafe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-35"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Box&lt;/span&gt;::&lt;span class="n"&gt;from_raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-36"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_d724c2d6c3244a979b169b4a559585b7-37"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Roughly speaking, this simple library does two things. First, it defines two data types, a struct
called &lt;tt class="docutils literal"&gt;RStruct&lt;/tt&gt; and a Rust enum (not to be confused with a C enum!) called &lt;tt class="docutils literal"&gt;Value&lt;/tt&gt;. Second, it
exposes two functions that may be used to access instances of these data types from C:
&lt;tt class="docutils literal"&gt;data_new()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;data_free()&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Let's take closer look now at what the code is doing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="defining-structs-and-enums-for-use-in-c"&gt;
&lt;h2&gt;Defining structs and enums for use in C&lt;/h2&gt;
&lt;p&gt;I want to expose instances of the RStruct type to C code. The definition of &lt;tt class="docutils literal"&gt;RStruct&lt;/tt&gt; is&lt;/p&gt;
&lt;pre class="code rust"&gt;&lt;a name="rest_code_1b6b309db3de40e3b9da5e9c3a097dbf-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#[repr(C)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1b6b309db3de40e3b9da5e9c3a097dbf-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;RStruct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1b6b309db3de40e3b9da5e9c3a097dbf-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;: &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c_char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1b6b309db3de40e3b9da5e9c3a097dbf-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;: &lt;span class="nc"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1b6b309db3de40e3b9da5e9c3a097dbf-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The first line here is &lt;tt class="docutils literal"&gt;[repr(C)]&lt;/tt&gt;. This is an attribute that modifies the layout of the struct
in memory to "do what C does." As described in the &lt;a class="reference external" href="https://doc.rust-lang.org/nomicon/other-reprs.html"&gt;Rustonomicon&lt;/a&gt;,&lt;/p&gt;
&lt;blockquote&gt;
The order, size, and alignment of fields is exactly what you would expect from C or C++. Any
type you expect to pass through an FFI boundary should have repr(C), as C is the lingua-franca
of the programming world.&lt;/blockquote&gt;
&lt;p&gt;Next, we define a public struct just as we would if we were writing typical Rust code. In this
example, the struct has two fields. The first is a field called &lt;tt class="docutils literal"&gt;name&lt;/tt&gt;, which has a type &lt;tt class="docutils literal"&gt;*const
c_char&lt;/tt&gt;. The Rust data types &lt;tt class="docutils literal"&gt;String&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&amp;amp;str&lt;/tt&gt; cannot be interpreted in C, so instead we
define the data type as a &lt;a class="reference external" href="https://doc.rust-lang.org/std/primitive.pointer.html"&gt;raw pointer&lt;/a&gt; to a &lt;tt class="docutils literal"&gt;c_char&lt;/tt&gt;. (In this case, &lt;tt class="docutils literal"&gt;*&lt;/tt&gt; is not dereferencing
the pointer but is &lt;a class="reference external" href="https://doc.rust-lang.org/beta/book/ch19-01-unsafe-rust.html#dereferencing-a-raw-pointer"&gt;part of the type name&lt;/a&gt; &lt;tt class="docutils literal"&gt;*const T&lt;/tt&gt;.)&lt;/p&gt;
&lt;p&gt;The second field is an enum whose definition follows:&lt;/p&gt;
&lt;pre class="code rust"&gt;&lt;a name="rest_code_50968308faa5491b9ed28adbef50b95c-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#[repr(C)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_50968308faa5491b9ed28adbef50b95c-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;Value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_50968308faa5491b9ed28adbef50b95c-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;_Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_50968308faa5491b9ed28adbef50b95c-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;_Float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_50968308faa5491b9ed28adbef50b95c-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Again we use &lt;tt class="docutils literal"&gt;#[repr(C)]&lt;/tt&gt; to indicate that we want the enum to be laid out in memory in the same
manner as in C. The enum &lt;tt class="docutils literal"&gt;Value&lt;/tt&gt; has two variants, &lt;tt class="docutils literal"&gt;_Int&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;_Float&lt;/tt&gt;, that each contain a
value of &lt;tt class="docutils literal"&gt;i32&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;f64&lt;/tt&gt;, respectively. If you're familiar with C, then you may have already
noticed that C enums are differnt from Rust enums in that they do not hold any data themselves. How
this minor annoyance is solved will be seen later when we generate the C header for this library.&lt;/p&gt;
&lt;p&gt;The data types i32 and f64 are easily translated into C's equivalent numeric data types, so there
is no need to do anything special with them.&lt;/p&gt;
&lt;div class="section" id="instantiating-and-freeing-memory"&gt;
&lt;h3&gt;Instantiating and freeing Memory&lt;/h3&gt;
&lt;p&gt;Following the data type definitions, there are two functions that are exposed through the FFI
boundary, one for instantiating an &lt;tt class="docutils literal"&gt;RStruct&lt;/tt&gt; and one for freeing the memory associated with an
&lt;tt class="docutils literal"&gt;RStruct&lt;/tt&gt;. The method for instantiation is first:&lt;/p&gt;
&lt;pre class="code rust"&gt;&lt;a name="rest_code_c5c45d679080471fa4e88d3ba112337f-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#[no_mangle]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c5c45d679080471fa4e88d3ba112337f-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"C"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;data_new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RStruct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c5c45d679080471fa4e88d3ba112337f-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Inside data_new()."&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c5c45d679080471fa4e88d3ba112337f-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_c5c45d679080471fa4e88d3ba112337f-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;Box&lt;/span&gt;::&lt;span class="n"&gt;into_raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Box&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RStruct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c5c45d679080471fa4e88d3ba112337f-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;: &lt;span class="nc"&gt;CString&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"my_rstruct"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c5c45d679080471fa4e88d3ba112337f-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error: CString::new()"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c5c45d679080471fa4e88d3ba112337f-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into_raw&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c5c45d679080471fa4e88d3ba112337f-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;: &lt;span class="nc"&gt;Value&lt;/span&gt;::&lt;span class="n"&gt;_Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c5c45d679080471fa4e88d3ba112337f-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_c5c45d679080471fa4e88d3ba112337f-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The first line contains an attribute called &lt;tt class="docutils literal"&gt;#[no_mangle]&lt;/tt&gt;. As defined in &lt;a class="reference external" href="https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html#calling-rust-functions-from-other-languages"&gt;the Book&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
Mangling is when a compiler changes the name we’ve given a function to a different name that
contains more information for other parts of the compilation process to consume but is less
human readable.&lt;/blockquote&gt;
&lt;p&gt;Placing the &lt;tt class="docutils literal"&gt;#[no_mangle]&lt;/tt&gt; attribute before the function definition ensures that the function
name matches that of the corresponding symbol in the library.&lt;/p&gt;
&lt;p&gt;Next is the function definition &lt;tt class="docutils literal"&gt;pub extern "C" fn data_new() &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; *mut RStruct&lt;/tt&gt;. Let's break this
down into parts to understand it better:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;pub&lt;/tt&gt; : The function will be callable from outside the library&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;extern "C"&lt;/tt&gt; : This line serves two different purposes in Rust, both related to FFI. In my
case, I use it specify that the function should be exposed with the &lt;a class="reference external" href="https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html#using-extern-functions-to-call-external-code"&gt;application binary interface
from C&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;fn data_new()&lt;/tt&gt; : This is just the usual &lt;tt class="docutils literal"&gt;fn&lt;/tt&gt; keyword and the name of the function&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; *mut RStruct&lt;/tt&gt; : Here I specify that the function will return a mutable, raw pointer to an
&lt;tt class="docutils literal"&gt;RStruct instance&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The purpose of this function is to create a &lt;tt class="docutils literal"&gt;RStruct&lt;/tt&gt; instance and return a pointer to it. The
&lt;tt class="docutils literal"&gt;RStruct&lt;/tt&gt; is created just as we would any other struct in Rust, with the exception of the
&lt;tt class="docutils literal"&gt;name&lt;/tt&gt; field:&lt;/p&gt;
&lt;pre class="code rust"&gt;&lt;a name="rest_code_db22fa28688d448aa57c1b463f3b296e-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;RStruct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_db22fa28688d448aa57c1b463f3b296e-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;: &lt;span class="nc"&gt;CString&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"my_rstruct"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_db22fa28688d448aa57c1b463f3b296e-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error: CString::new()"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_db22fa28688d448aa57c1b463f3b296e-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into_raw&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_db22fa28688d448aa57c1b463f3b296e-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;: &lt;span class="nc"&gt;Value&lt;/span&gt;::&lt;span class="n"&gt;_Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_db22fa28688d448aa57c1b463f3b296e-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The &lt;tt class="docutils literal"&gt;CString&lt;/tt&gt; is first created with the &lt;tt class="docutils literal"&gt;new()&lt;/tt&gt; constructor and contains the value
&lt;tt class="docutils literal"&gt;"my_rstruct"&lt;/tt&gt;. After unpacking the result with &lt;tt class="docutils literal"&gt;expect()&lt;/tt&gt;, I call the &lt;tt class="docutils literal"&gt;into_raw()&lt;/tt&gt; method to
create a raw pointer to the C string whose &lt;a class="reference external" href="https://doc.rust-lang.org/std/ffi/struct.CString.html#method.into_raw"&gt;ownership will be passed off to the calling C
code&lt;/a&gt;. (If I had used &lt;tt class="docutils literal"&gt;as_ptr()&lt;/tt&gt; instead, the pointer would have been dropped immediately after
the function call because the &lt;tt class="docutils literal"&gt;CString&lt;/tt&gt; &lt;a class="reference external" href="https://doc.rust-lang.org/std/ffi/struct.CString.html#method.as_ptr"&gt;would have been deallocated&lt;/a&gt;.) The &lt;tt class="docutils literal"&gt;value&lt;/tt&gt; field is
instantiated as it would be in normal Rust.&lt;/p&gt;
&lt;p&gt;What is perhaps new in this method is the &lt;tt class="docutils literal"&gt;Box&lt;/tt&gt; type that wraps the &lt;tt class="docutils literal"&gt;RStruct&lt;/tt&gt; instance.&lt;/p&gt;
&lt;pre class="code rust"&gt;&lt;a name="rest_code_23022038f17b42e8a9a6086151a67fda-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;Box&lt;/span&gt;::&lt;span class="n"&gt;into_raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Box&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;A &lt;tt class="docutils literal"&gt;Box&lt;/tt&gt; is one of Rust's smart pointers that is used to &lt;a class="reference external" href="https://doc.rust-lang.org/book/ch15-01-box.html"&gt;allocate memory for a data type on the
heap&lt;/a&gt;. When &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Box::new()&lt;/span&gt;&lt;/tt&gt; is called it creates a pointer to the newly created &lt;tt class="docutils literal"&gt;RStruct&lt;/tt&gt;
instance. Normally, this pointer would be dropped and the memory automatically deallocated when the
&lt;tt class="docutils literal"&gt;data_new()&lt;/tt&gt; function returns. However, the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Box::into_raw()&lt;/span&gt;&lt;/tt&gt; function serves the same purpose
here as the corresponding function for &lt;tt class="docutils literal"&gt;CString&lt;/tt&gt;: it hands off ownership of the pointer to the
calling code so that the memory is not deallocated.&lt;/p&gt;
&lt;p&gt;There is a rule-of-thumb that memory allocated by Rust should be freed by Rust. For this reason, we
provide the &lt;tt class="docutils literal"&gt;data_free()&lt;/tt&gt; method that C code may use to deallocate the memory that is allocated
by &lt;tt class="docutils literal"&gt;data_new()&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="code rust"&gt;&lt;a name="rest_code_1afd7c46e2284749bb2edc66c6b7c732-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#[no_mangle]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1afd7c46e2284749bb2edc66c6b7c732-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"C"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;data_free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;: &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RStruct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1afd7c46e2284749bb2edc66c6b7c732-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_null&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1afd7c46e2284749bb2edc66c6b7c732-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1afd7c46e2284749bb2edc66c6b7c732-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1afd7c46e2284749bb2edc66c6b7c732-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;unsafe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1afd7c46e2284749bb2edc66c6b7c732-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Box&lt;/span&gt;::&lt;span class="n"&gt;from_raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1afd7c46e2284749bb2edc66c6b7c732-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a name="rest_code_1afd7c46e2284749bb2edc66c6b7c732-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;This function accepts a mutable pointer to an RStruct. First, it checks whether the pointer is null
and if it is, the function returns without doing anything. Assuming that the pointer is not null,
the &lt;tt class="docutils literal"&gt;Box&lt;/tt&gt; is reconstructed from it inside an &lt;tt class="docutils literal"&gt;unsafe&lt;/tt&gt; block because &lt;tt class="docutils literal"&gt;from_raw()&lt;/tt&gt; &lt;a class="reference external" href="https://doc.rust-lang.org/std/boxed/struct.Box.html#method.from_raw"&gt;is
unsafe&lt;/a&gt;. Importantly, this new Box pointer will go out of scope at the end of the function so that
it will automatically be dropped when the function returns.&lt;/p&gt;
&lt;p&gt;Building the library is simple. I run &lt;tt class="docutils literal"&gt;cargo build &lt;span class="pre"&gt;--release&lt;/span&gt;&lt;/tt&gt; to build a release version. The
library itself will be found at &lt;tt class="docutils literal"&gt;target/release/librstruct.so&lt;/tt&gt;. On Linux, one can verify that it
contains the &lt;tt class="docutils literal"&gt;data_new()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;data_free()&lt;/tt&gt; methods by displaying its symbols with the &lt;tt class="docutils literal"&gt;nm
&lt;span class="pre"&gt;-g&lt;/span&gt;&lt;/tt&gt; command:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_a6e2baa52ded42a6a1932c5ec125de45-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; nm -g target/release/librstruct.so
&lt;a name="rest_code_a6e2baa52ded42a6a1932c5ec125de45-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;#&lt;/span&gt; snip
&lt;a name="rest_code_a6e2baa52ded42a6a1932c5ec125de45-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;00000000000046c0 T data_free&lt;/span&gt;
&lt;a name="rest_code_a6e2baa52ded42a6a1932c5ec125de45-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;00000000000044e0 T data_new&lt;/span&gt;
&lt;a name="rest_code_a6e2baa52ded42a6a1932c5ec125de45-5"&gt;&lt;/a&gt;&lt;span class="gp"&gt;#&lt;/span&gt; snip
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="generating-the-header-for-the-library"&gt;
&lt;h3&gt;Generating the header for the library&lt;/h3&gt;
&lt;p&gt;Now that I have a shared library, I want to access the functions that it exposes from C. To do
this, I first need a header file that I can use to import the library's declarations into the C
code. Moreover, generating the header can help in understanding how Rust translates its data types
to C.&lt;/p&gt;
&lt;p&gt;I will use &lt;a class="reference external" href="https://github.com/eqrion/cbindgen"&gt;cbindgen&lt;/a&gt; to automatically generate the header. &lt;tt class="docutils literal"&gt;cbindgen&lt;/tt&gt; is installed with the
command&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_ac72fd56120b497b9d8d1c1be7dbf49e-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cargo install cbindgen
&lt;/pre&gt;&lt;p&gt;&lt;tt class="docutils literal"&gt;cbindgen&lt;/tt&gt; is highly configurable, but for the project described here I only need its most basic
functionality. Assuming that I am in the root directory of my Rust project, I generate the header
&lt;tt class="docutils literal"&gt;rstruct.h&lt;/tt&gt; with the following&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_dabad64b9038496cba08a30fc4e7f836-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cbindgen --lang C -o rstruct.h .
&lt;/pre&gt;&lt;p&gt;After running &lt;tt class="docutils literal"&gt;cbindgen&lt;/tt&gt; there is a new file called &lt;tt class="docutils literal"&gt;rstruct.h&lt;/tt&gt; in the project folder. Here are
its contents:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-1"&gt; 1&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-2"&gt; 2&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-3"&gt; 3&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-4"&gt; 4&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-5"&gt; 5&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-6"&gt; 6&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-7"&gt; 7&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-8"&gt; 8&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-9"&gt; 9&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-10"&gt;10&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-11"&gt;11&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-12"&gt;12&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-13"&gt;13&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-14"&gt;14&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-15"&gt;15&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-16"&gt;16&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-17"&gt;17&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-18"&gt;18&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-19"&gt;19&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-20"&gt;20&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-21"&gt;21&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-22"&gt;22&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-23"&gt;23&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-24"&gt;24&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-25"&gt;25&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-26"&gt;26&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-27"&gt;27&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-28"&gt;28&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-29"&gt;29&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-30"&gt;30&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-31"&gt;31&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-32"&gt;32&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-33"&gt;33&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_b88b49909bea49c7a9bf9730597ecdd9-34"&gt;34&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code c"&gt;&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdarg.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-3"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-4"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-7"&gt;&lt;/a&gt;  &lt;span class="n"&gt;_Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-8"&gt;&lt;/a&gt;  &lt;span class="n"&gt;_Float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;Value_Tag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-11"&gt;&lt;/a&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-12"&gt;&lt;/a&gt;  &lt;span class="kt"&gt;int32_t&lt;/span&gt; &lt;span class="n"&gt;_0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;_Int_Body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-15"&gt;&lt;/a&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-16"&gt;&lt;/a&gt;  &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;_0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-17"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;_Float_Body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-19"&gt;&lt;/a&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-20"&gt;&lt;/a&gt;  &lt;span class="n"&gt;Value_Tag&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-21"&gt;&lt;/a&gt;  &lt;span class="k"&gt;union&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-22"&gt;&lt;/a&gt;    &lt;span class="n"&gt;_Int_Body&lt;/span&gt; &lt;span class="n"&gt;_int&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-23"&gt;&lt;/a&gt;    &lt;span class="n"&gt;_Float_Body&lt;/span&gt; &lt;span class="n"&gt;_float&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-24"&gt;&lt;/a&gt;  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-25"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-26"&gt;&lt;/a&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-27"&gt;&lt;/a&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-28"&gt;&lt;/a&gt;  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-29"&gt;&lt;/a&gt;  &lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-30"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;RStruct&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-32"&gt;&lt;/a&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;data_free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RStruct&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-33"&gt;&lt;/a&gt;
&lt;a name="rest_code_b88b49909bea49c7a9bf9730597ecdd9-34"&gt;&lt;/a&gt;&lt;span class="n"&gt;RStruct&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;data_new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;First, you can see the &lt;tt class="docutils literal"&gt;enum&lt;/tt&gt; that contains the variations of the &lt;tt class="docutils literal"&gt;Value&lt;/tt&gt; data type that is
stored in the &lt;tt class="docutils literal"&gt;RStruct&lt;/tt&gt; and that was defined in Rust. The name of this new type is &lt;tt class="docutils literal"&gt;Value_Tag&lt;/tt&gt;,
and it is used to define the current type of a value.&lt;/p&gt;
&lt;pre class="code c"&gt;&lt;a name="rest_code_1aaaccaac05d4839adbe9f7cff192874-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_1aaaccaac05d4839adbe9f7cff192874-2"&gt;&lt;/a&gt;  &lt;span class="n"&gt;Value_Tag&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_1aaaccaac05d4839adbe9f7cff192874-3"&gt;&lt;/a&gt;  &lt;span class="k"&gt;union&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_1aaaccaac05d4839adbe9f7cff192874-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;_Int_Body&lt;/span&gt; &lt;span class="n"&gt;_int&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_1aaaccaac05d4839adbe9f7cff192874-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;_Float_Body&lt;/span&gt; &lt;span class="n"&gt;_float&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_1aaaccaac05d4839adbe9f7cff192874-6"&gt;&lt;/a&gt;  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;a name="rest_code_1aaaccaac05d4839adbe9f7cff192874-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;A &lt;tt class="docutils literal"&gt;Value&lt;/tt&gt; is just another struct that contains a &lt;tt class="docutils literal"&gt;Value_Tag&lt;/tt&gt; field to identify which variant of
the &lt;tt class="docutils literal"&gt;enum&lt;/tt&gt; it is holding and a &lt;tt class="docutils literal"&gt;union&lt;/tt&gt; field that holds the actual value.&lt;/p&gt;
&lt;p&gt;The important thing to understand here is that &lt;tt class="docutils literal"&gt;cbindgen&lt;/tt&gt; effectively uses nested C data types to
represent complex Rust data structures. In particular, Rust &lt;tt class="docutils literal"&gt;enums&lt;/tt&gt; are a combination of C
&lt;tt class="docutils literal"&gt;structs&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;enums&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;unions&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="calling-the-library-from-c"&gt;
&lt;h2&gt;Calling the library from C&lt;/h2&gt;
&lt;p&gt;With everything in place, it's now time to write the C program. My example C program looks like the
following:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-1"&gt; 1&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-2"&gt; 2&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-3"&gt; 3&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-4"&gt; 4&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-5"&gt; 5&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-6"&gt; 6&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-7"&gt; 7&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-8"&gt; 8&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-9"&gt; 9&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-10"&gt;10&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-11"&gt;11&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-12"&gt;12&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-13"&gt;13&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-14"&gt;14&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-15"&gt;15&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-16"&gt;16&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-17"&gt;17&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-18"&gt;18&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-19"&gt;19&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-20"&gt;20&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-21"&gt;21&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-22"&gt;22&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-23"&gt;23&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-24"&gt;24&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-25"&gt;25&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-26"&gt;26&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-27"&gt;27&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-28"&gt;28&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-29"&gt;29&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-30"&gt;30&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-31"&gt;31&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-32"&gt;32&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-33"&gt;33&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-34"&gt;34&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-35"&gt;35&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-36"&gt;36&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-37"&gt;37&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-38"&gt;38&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-39"&gt;39&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-40"&gt;40&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-41"&gt;41&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-42"&gt;42&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-43"&gt;43&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-44"&gt;44&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-45"&gt;45&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-46"&gt;46&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-47"&gt;47&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-48"&gt;48&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-49"&gt;49&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-50"&gt;50&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-51"&gt;51&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-52"&gt;52&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/#rest_code_8334087a10e5400082a4f596ff8b5e4e-53"&gt;53&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code c"&gt;&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;dlfcn.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-3"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-5"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"rstruct.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-7"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-8"&gt;&lt;/a&gt;  &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-9"&gt;&lt;/a&gt;  &lt;span class="n"&gt;RStruct&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data_new&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-10"&gt;&lt;/a&gt;  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data_free&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;RStruct&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-11"&gt;&lt;/a&gt;  &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-13"&gt;&lt;/a&gt;  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Loading librstruct.so...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-14"&gt;&lt;/a&gt;  &lt;span class="n"&gt;handle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-15"&gt;&lt;/a&gt;    &lt;span class="s"&gt;"librstruct.so"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-16"&gt;&lt;/a&gt;    &lt;span class="n"&gt;RTLD_LAZY&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-17"&gt;&lt;/a&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-18"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dlerror&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-20"&gt;&lt;/a&gt;    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-21"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-22"&gt;&lt;/a&gt;  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Done.&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-24"&gt;&lt;/a&gt;  &lt;span class="n"&gt;dlerror&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-26"&gt;&lt;/a&gt;  &lt;span class="n"&gt;data_new&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RStruct&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;dlsym&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"data_new"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-27"&gt;&lt;/a&gt;  &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dlerror&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-28"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-29"&gt;&lt;/a&gt;    &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-30"&gt;&lt;/a&gt;    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-31"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-32"&gt;&lt;/a&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-33"&gt;&lt;/a&gt;  &lt;span class="n"&gt;dlerror&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-34"&gt;&lt;/a&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-35"&gt;&lt;/a&gt;  &lt;span class="n"&gt;data_free&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;RStruct&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;dlsym&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"data_free"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-36"&gt;&lt;/a&gt;  &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dlerror&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-37"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-38"&gt;&lt;/a&gt;    &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-39"&gt;&lt;/a&gt;    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-40"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-41"&gt;&lt;/a&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-42"&gt;&lt;/a&gt;  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Calling data_new() from main.c...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-43"&gt;&lt;/a&gt;  &lt;span class="n"&gt;RStruct&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data_new&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-44"&gt;&lt;/a&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-45"&gt;&lt;/a&gt;  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Back inside main.c. Printing results...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-46"&gt;&lt;/a&gt;  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Name: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Value: %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_int&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-47"&gt;&lt;/a&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-48"&gt;&lt;/a&gt;  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Freeing the RStruct data...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-49"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data_free&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-50"&gt;&lt;/a&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-51"&gt;&lt;/a&gt;  &lt;span class="n"&gt;dlclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-52"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_8334087a10e5400082a4f596ff8b5e4e-53"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;This code is based on the example in the &lt;tt class="docutils literal"&gt;dlopen()&lt;/tt&gt; &lt;a class="reference external" href="https://linux.die.net/man/3/dlopen"&gt;man pages&lt;/a&gt;. In particular, the library file
is opened and a handle attached to it here:&lt;/p&gt;
&lt;pre class="code c"&gt;&lt;a name="rest_code_75b6eb5344ab4584ba11de255bdcc2c9-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;handle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_75b6eb5344ab4584ba11de255bdcc2c9-2"&gt;&lt;/a&gt;  &lt;span class="s"&gt;"librstruct.so"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_75b6eb5344ab4584ba11de255bdcc2c9-3"&gt;&lt;/a&gt;  &lt;span class="n"&gt;RTLD_LAZY&lt;/span&gt;
&lt;a name="rest_code_75b6eb5344ab4584ba11de255bdcc2c9-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;A function pointer to &lt;tt class="docutils literal"&gt;data_new()&lt;/tt&gt; is created with &lt;tt class="docutils literal"&gt;dlsym()&lt;/tt&gt;, and we use the function to create
the new &lt;tt class="docutils literal"&gt;RStruct&lt;/tt&gt; instance with the lines&lt;/p&gt;
&lt;pre class="code c"&gt;&lt;a name="rest_code_9d098eaff0ac46999a9dc26da0977ae6-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;data_new&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RStruct&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;dlsym&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"data_new"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_9d098eaff0ac46999a9dc26da0977ae6-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// snip&lt;/span&gt;
&lt;a name="rest_code_9d098eaff0ac46999a9dc26da0977ae6-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;RStruct&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data_new&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Finally, the data is freed by creating another function pointer to &lt;tt class="docutils literal"&gt;data_free()&lt;/tt&gt; and calling it.&lt;/p&gt;
&lt;pre class="code c"&gt;&lt;a name="rest_code_cfc11c485be44561b409afeea33674f4-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;data_free&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;RStruct&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;dlsym&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"data_free"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_cfc11c485be44561b409afeea33674f4-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// snip&lt;/span&gt;
&lt;a name="rest_code_cfc11c485be44561b409afeea33674f4-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data_free&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;div class="section" id="running-the-program"&gt;
&lt;h3&gt;Running the program&lt;/h3&gt;
&lt;p&gt;I wrote a small Makefile to handle compilation of the C and Rust programs while I wrote this
post. I won't include it here because it distracts from the main message about the Rust
FFI. Instead, I will describe how to compile the program from the command line.&lt;/p&gt;
&lt;p&gt;I first placed the &lt;tt class="docutils literal"&gt;librstruct.so&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;rstruct.h&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;main.c&lt;/tt&gt; programs into the following
directory structure:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_b9fe2fa483ec4a63910b11cc01c136b4-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; tree
&lt;a name="rest_code_b9fe2fa483ec4a63910b11cc01c136b4-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;.&lt;/span&gt;
&lt;a name="rest_code_b9fe2fa483ec4a63910b11cc01c136b4-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;├── include&lt;/span&gt;
&lt;a name="rest_code_b9fe2fa483ec4a63910b11cc01c136b4-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;│   └── rstruct.h&lt;/span&gt;
&lt;a name="rest_code_b9fe2fa483ec4a63910b11cc01c136b4-5"&gt;&lt;/a&gt;&lt;span class="go"&gt;├── lib&lt;/span&gt;
&lt;a name="rest_code_b9fe2fa483ec4a63910b11cc01c136b4-6"&gt;&lt;/a&gt;&lt;span class="go"&gt;│   └── librstruct.so&lt;/span&gt;
&lt;a name="rest_code_b9fe2fa483ec4a63910b11cc01c136b4-7"&gt;&lt;/a&gt;&lt;span class="go"&gt;└── src&lt;/span&gt;
&lt;a name="rest_code_b9fe2fa483ec4a63910b11cc01c136b4-8"&gt;&lt;/a&gt;&lt;span class="go"&gt;    └── main.c&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Next, I compiled the &lt;tt class="docutils literal"&gt;main&lt;/tt&gt; binary with gcc.&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_352cf378f2f64574baa4bb2b8fe8a162-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; gcc -Wall -g -Iinclude -c -o main.o main.c
&lt;a name="rest_code_352cf378f2f64574baa4bb2b8fe8a162-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; gcc -Wall -g -o main main.o -ldl
&lt;/pre&gt;&lt;p&gt;(&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-ldl&lt;/span&gt;&lt;/tt&gt; is used to link against libdl for dynamically loading the library from C.) After
compilation I run the &lt;tt class="docutils literal"&gt;main&lt;/tt&gt; binary. To make it work, I set the &lt;tt class="docutils literal"&gt;LD_LIBRARY_PATH&lt;/tt&gt; environment
variable so that the program knows to look inside the &lt;tt class="docutils literal"&gt;lib&lt;/tt&gt; directory for the &lt;tt class="docutils literal"&gt;librstruct.so&lt;/tt&gt;
library.&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_be0943b0540b421ea0a59802a0f60cb7-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;lib ./main
&lt;a name="rest_code_be0943b0540b421ea0a59802a0f60cb7-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;Loading librstruct.so...&lt;/span&gt;
&lt;a name="rest_code_be0943b0540b421ea0a59802a0f60cb7-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;Done.&lt;/span&gt;
&lt;a name="rest_code_be0943b0540b421ea0a59802a0f60cb7-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_be0943b0540b421ea0a59802a0f60cb7-5"&gt;&lt;/a&gt;&lt;span class="go"&gt;Calling data_new() from main.c...&lt;/span&gt;
&lt;a name="rest_code_be0943b0540b421ea0a59802a0f60cb7-6"&gt;&lt;/a&gt;&lt;span class="go"&gt;Inside data_new().&lt;/span&gt;
&lt;a name="rest_code_be0943b0540b421ea0a59802a0f60cb7-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_be0943b0540b421ea0a59802a0f60cb7-8"&gt;&lt;/a&gt;&lt;span class="go"&gt;Back inside main.c. Printing results...&lt;/span&gt;
&lt;a name="rest_code_be0943b0540b421ea0a59802a0f60cb7-9"&gt;&lt;/a&gt;&lt;span class="go"&gt;Name: my_rstruct&lt;/span&gt;
&lt;a name="rest_code_be0943b0540b421ea0a59802a0f60cb7-10"&gt;&lt;/a&gt;&lt;span class="go"&gt;Value: 42&lt;/span&gt;
&lt;a name="rest_code_be0943b0540b421ea0a59802a0f60cb7-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_be0943b0540b421ea0a59802a0f60cb7-12"&gt;&lt;/a&gt;&lt;span class="go"&gt;Freeing the RStruct data...&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Nice! From the output you can see the print statements that I placed inside both the Rust and C
code to indicate where the program was as it was running. In summary, the program performs the
following sequence of events:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The main binary is run&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;librstruct.so&lt;/tt&gt; library is opened and pointers to the &lt;tt class="docutils literal"&gt;data_new()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;data_free()&lt;/tt&gt;
functions are created&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;data_new()&lt;/tt&gt; is called, creating our Rust datatype on the heap and returning a pointer to it in
the C code&lt;/li&gt;
&lt;li&gt;Information about the data type is printed from C&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;data_free()&lt;/tt&gt; is called, freeing the memory from back inside Rust&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;And that's it! I hope you enjoyed this post. It took me several days of reading and trial-and-error
to learn about this feature of Rust. The topics covered here were&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the Rust FFI and its purpose&lt;/li&gt;
&lt;li&gt;creating a complex data type (a Rust enum nested inside a Rust struct) and exporting it through
the FFI&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Box&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;CString&lt;/tt&gt; Rust data types&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;cbindgen&lt;/tt&gt; for automatically creating header files from Rust code&lt;/li&gt;
&lt;li&gt;using the Rust library from inside C&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>c</category><category>rust</category><guid>http://kmdouglass.github.io/posts/complex-data-types-and-the-rust-ffi/</guid><pubDate>Thu, 04 Apr 2019 17:51:55 GMT</pubDate></item></channel></rss>