<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kyle M. Douglass (Posts about embedded microscopy)</title><link>http://kmdouglass.github.io/</link><description></description><atom:link href="http://kmdouglass.github.io/categories/cat_embedded-microscopy.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 16 Jun 2019 08:09:28 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Linking shared libraries in Micro-Manager for Linux</title><link>http://kmdouglass.github.io/posts/linking-shared-libraries-in-micro-manager-for-linux/</link><dc:creator>Kyle M. Douglass</dc:creator><description>&lt;div&gt;&lt;p&gt;Lately I have been working on a new &lt;a class="reference external" href="https://github.com/kmdouglass/RPi-DeviceAdapters"&gt;Video4Linux2 device adapter&lt;/a&gt; for &lt;a class="reference external" href="https://micro-manager.org/"&gt;Micro-Manager&lt;/a&gt;. I
encountered the following error after adding some functionality that introduced two &lt;a class="reference external" href="https://www.boost.org/"&gt;Boost
libraries&lt;/a&gt; as new dependencies in my project.&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_02df986928d44e26886a11efd12ce341-1"&gt;&lt;/a&gt;Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;a name="rest_code_02df986928d44e26886a11efd12ce341-2"&gt;&lt;/a&gt;  File &lt;span class="s2"&gt;"RPiV4L2.py"&lt;/span&gt;, line &lt;span class="m"&gt;17&lt;/span&gt;, in &amp;lt;module&amp;gt;
&lt;a name="rest_code_02df986928d44e26886a11efd12ce341-3"&gt;&lt;/a&gt;    mmc.loadDevice&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"camera"&lt;/span&gt;, &lt;span class="s2"&gt;"RPiV4L2"&lt;/span&gt;, &lt;span class="s2"&gt;"RPiV4L2"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_02df986928d44e26886a11efd12ce341-4"&gt;&lt;/a&gt;  File &lt;span class="s2"&gt;"/home/micro-manager/app/lib/micro-manager/MMCorePy.py"&lt;/span&gt;, line &lt;span class="m"&gt;3515&lt;/span&gt;, in loadDevice
&lt;a name="rest_code_02df986928d44e26886a11efd12ce341-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; _MMCorePy.CMMCore_loadDevice&lt;span class="o"&gt;(&lt;/span&gt;self, label, moduleName, deviceName&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_02df986928d44e26886a11efd12ce341-6"&gt;&lt;/a&gt;MMCorePy.CMMError: Failed to load device &lt;span class="s2"&gt;"RPiV4L2"&lt;/span&gt; from adapter module &lt;span class="s2"&gt;"RPiV4L2"&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; Failed to load device adapter &lt;span class="s2"&gt;"RPiV4L2"&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; Failed to load module &lt;span class="s2"&gt;"/home/micro-manager/app/lib/micro-manager/libmmgr_dal_RPiV4L2.so.0"&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; /home/micro-manager/app/lib/micro-manager/libmmgr_dal_RPiV4L2.so.0: undefined symbol: _ZN5boost10filesystem6detail13dir_itr_closeERPvS3_ &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I received this error when I tried to load the device in a Python script. At first I was puzzled
because the code compiled without problems, but I soon found that the solution was simple.&lt;/p&gt;
&lt;p&gt;The key part of the message is &lt;tt class="docutils literal"&gt;undefined symbol:
_ZN5boost10filesystem6detail13dir_itr_closeERPvS3_&lt;/tt&gt;. To troubleshoot this, I first demangled the
symbol name by entering it at &lt;a class="reference external" href="https://demangler.com/"&gt;https://demangler.com/&lt;/a&gt;. I discovered that the symbol was referring to
the function &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;boost::filesystem::detail::dir_itr_close(void*&amp;amp;,&lt;/span&gt; &lt;span class="pre"&gt;void*&amp;amp;)&lt;/span&gt;&lt;/tt&gt;. I had added both the
Boost filesystem and Boost regex libraries to this device adapter as dependencies, so it was not
surprising that either of their names appeared in the error message.&lt;/p&gt;
&lt;p&gt;Next, I used the &lt;a class="reference external" href="http://man7.org/linux/man-pages/man1/ldd.1.html"&gt;ldd&lt;/a&gt; program to check which libraries my device adapter were linked
against. (libmmgr_dal_RPiV4l2.so.0 is the name of the device adapter library file).&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_f8dbd5a6b4be4049acdcc6c3b0b209cc-1"&gt;&lt;/a&gt;$ ldd libmmgr_dal_RPiV4L2.so.0
&lt;a name="rest_code_f8dbd5a6b4be4049acdcc6c3b0b209cc-2"&gt;&lt;/a&gt;     linux-vdso.so.1 &lt;span class="o"&gt;(&lt;/span&gt;0x7ec21000&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f8dbd5a6b4be4049acdcc6c3b0b209cc-3"&gt;&lt;/a&gt;     libdl.so.2 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib/arm-linux-gnueabihf/libdl.so.2 &lt;span class="o"&gt;(&lt;/span&gt;0x76e9c000&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f8dbd5a6b4be4049acdcc6c3b0b209cc-4"&gt;&lt;/a&gt;     libstdc++.so.6 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /usr/lib/arm-linux-gnueabihf/libstdc++.so.6 &lt;span class="o"&gt;(&lt;/span&gt;0x76d54000&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f8dbd5a6b4be4049acdcc6c3b0b209cc-5"&gt;&lt;/a&gt;     libm.so.6 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib/arm-linux-gnueabihf/libm.so.6 &lt;span class="o"&gt;(&lt;/span&gt;0x76cdc000&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f8dbd5a6b4be4049acdcc6c3b0b209cc-6"&gt;&lt;/a&gt;     libc.so.6 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib/arm-linux-gnueabihf/libc.so.6 &lt;span class="o"&gt;(&lt;/span&gt;0x76bee000&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f8dbd5a6b4be4049acdcc6c3b0b209cc-7"&gt;&lt;/a&gt;     libgcc_s.so.1 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib/arm-linux-gnueabihf/libgcc_s.so.1 &lt;span class="o"&gt;(&lt;/span&gt;0x76bc1000&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f8dbd5a6b4be4049acdcc6c3b0b209cc-8"&gt;&lt;/a&gt;     libicudata.so.57 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /usr/lib/arm-linux-gnueabihf/libicudata.so.57 &lt;span class="o"&gt;(&lt;/span&gt;0x75334000&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f8dbd5a6b4be4049acdcc6c3b0b209cc-9"&gt;&lt;/a&gt;     libicui18n.so.57 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /usr/lib/arm-linux-gnueabihf/libicui18n.so.57 &lt;span class="o"&gt;(&lt;/span&gt;0x75187000&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f8dbd5a6b4be4049acdcc6c3b0b209cc-10"&gt;&lt;/a&gt;     libicuuc.so.57 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /usr/lib/arm-linux-gnueabihf/libicuuc.so.57 &lt;span class="o"&gt;(&lt;/span&gt;0x7505e000&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f8dbd5a6b4be4049acdcc6c3b0b209cc-11"&gt;&lt;/a&gt;     librt.so.1 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib/arm-linux-gnueabihf/librt.so.1 &lt;span class="o"&gt;(&lt;/span&gt;0x75048000&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f8dbd5a6b4be4049acdcc6c3b0b209cc-12"&gt;&lt;/a&gt;     libpthread.so.0 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib/arm-linux-gnueabihf/libpthread.so.0 &lt;span class="o"&gt;(&lt;/span&gt;0x75024000&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f8dbd5a6b4be4049acdcc6c3b0b209cc-13"&gt;&lt;/a&gt;     /lib/ld-linux-armhf.so.3 &lt;span class="o"&gt;(&lt;/span&gt;0x76fb4000&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Neither libboost_filesystem nor libboost_regex are listed, so I knew that they were not linked with
the device adapter.&lt;/p&gt;
&lt;p&gt;There is a Makefile.am included in the directory of every device adapter in the Micro-Manager
project. This file is used by Autotools define how the device adapter should be compiled and
linked. Here is what my Makefile.am looked like:&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="http://kmdouglass.github.io/posts/linking-shared-libraries-in-micro-manager-for-linux/#rest_code_00c81f3febaa4837baf55d9bec9ab8e9-1"&gt;1&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/linking-shared-libraries-in-micro-manager-for-linux/#rest_code_00c81f3febaa4837baf55d9bec9ab8e9-2"&gt;2&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/linking-shared-libraries-in-micro-manager-for-linux/#rest_code_00c81f3febaa4837baf55d9bec9ab8e9-3"&gt;3&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/linking-shared-libraries-in-micro-manager-for-linux/#rest_code_00c81f3febaa4837baf55d9bec9ab8e9-4"&gt;4&lt;/a&gt;
&lt;a href="http://kmdouglass.github.io/posts/linking-shared-libraries-in-micro-manager-for-linux/#rest_code_00c81f3febaa4837baf55d9bec9ab8e9-5"&gt;5&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code Makefile"&gt;&lt;a name="rest_code_00c81f3febaa4837baf55d9bec9ab8e9-1"&gt;&lt;/a&gt;&lt;span class="nv"&gt;AM_CXXFLAGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;MMDEVAPI_CXXFLAGS&lt;span class="k"&gt;)&lt;/span&gt;
&lt;a name="rest_code_00c81f3febaa4837baf55d9bec9ab8e9-2"&gt;&lt;/a&gt;&lt;span class="nv"&gt;deviceadapter_LTLIBRARIES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; libmmgr_dal_RPiV4L2.la
&lt;a name="rest_code_00c81f3febaa4837baf55d9bec9ab8e9-3"&gt;&lt;/a&gt;&lt;span class="nv"&gt;libmmgr_dal_RPiV4L2_la_SOURCES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; RPiV4L2.cpp RPiV4L2.h refactor.h ../../MMDevice/MMDevice.h ../../MMDevice/DeviceBase.h
&lt;a name="rest_code_00c81f3febaa4837baf55d9bec9ab8e9-4"&gt;&lt;/a&gt;&lt;span class="nv"&gt;libmmgr_dal_RPiV4L2_la_LIBADD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;MMDEVAPI_LIBADD&lt;span class="k"&gt;)&lt;/span&gt;
&lt;a name="rest_code_00c81f3febaa4837baf55d9bec9ab8e9-5"&gt;&lt;/a&gt;&lt;span class="nv"&gt;libmmgr_dal_RPiV4L2_la_LDFLAGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;MMDEVAPI_LDFLAGS&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;After experimenting a bit, I discovered that I could instruct the linker to link against shared
libraries by adding them to the &lt;tt class="docutils literal"&gt;libmmgr_dal_RPiV4L2_la_LDFLAGS&lt;/tt&gt; variable with the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-l&lt;/span&gt;&lt;/tt&gt;
flag. The resulting line now looks like:&lt;/p&gt;
&lt;pre class="code Makefile"&gt;&lt;a name="rest_code_ca9552344c1245cc91c80ec3737a83d8-1"&gt;&lt;/a&gt;&lt;span class="nv"&gt;libmmgr_dal_RPiV4L2_la_LDFLAGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;MMDEVAPI_LDFLAGS&lt;span class="k"&gt;)&lt;/span&gt; -lboost_regex -lboost_filesystem
&lt;/pre&gt;&lt;p&gt;Finally, running &lt;tt class="docutils literal"&gt;ldd&lt;/tt&gt; on the rebuilt device adapter now shows these two libraries:&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_6daa273d04d74cfaae49c56c46a05fbf-1"&gt;&lt;/a&gt;$ ldd libmmgr_dal_RPiV4L2.so.0
&lt;a name="rest_code_6daa273d04d74cfaae49c56c46a05fbf-2"&gt;&lt;/a&gt;     linux-vdso.so.1 &lt;span class="o"&gt;(&lt;/span&gt;0x7ed74000&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_6daa273d04d74cfaae49c56c46a05fbf-3"&gt;&lt;/a&gt;     libboost_regex.so.1.62.0 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /usr/lib/arm-linux-gnueabihf/libboost_regex.so.1.62.0 &lt;span class="o"&gt;(&lt;/span&gt;0x76e3c000&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_6daa273d04d74cfaae49c56c46a05fbf-4"&gt;&lt;/a&gt;     libboost_filesystem.so.1.62.0 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /usr/lib/arm-linux-gnueabihf/libboost_filesystem.so.1.62.0 &lt;span class="o"&gt;(&lt;/span&gt;0x76e1b000&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_6daa273d04d74cfaae49c56c46a05fbf-5"&gt;&lt;/a&gt;     ...
&lt;/pre&gt;&lt;/div&gt;</description><category>micro-manager</category><guid>http://kmdouglass.github.io/posts/linking-shared-libraries-in-micro-manager-for-linux/</guid><pubDate>Sat, 19 Jan 2019 11:00:37 GMT</pubDate></item><item><title>Accessing the Raspberry Pi camera image sensor</title><link>http://kmdouglass.github.io/posts/accessing-the-raspberry-pi-camera-image-sensor/</link><dc:creator>Kyle M. Douglass</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt; You can easily ruin your Raspberry Pi camera module by
following the steps in this post. Proceed with caution.&lt;/p&gt;
&lt;p&gt;Over the past half year I have been making slow but steady progress on
&lt;a class="reference external" href="https://hackaday.io/project/19677-basic-lensless-imaging-for-low-cost-microscopy"&gt;my lensless imager project&lt;/a&gt;. The
purpose, aside from having a bit of fun, is to create an imaging
system for basic cell biology that doesn't use an expensive microscope
objective.&lt;/p&gt;
&lt;p&gt;A lensless imager works just as its name implies: an image sensor
records the scattered light from a microscopic, transparent object and
computationally reconstructs an image of that object, all without a
lens. The best resolutions are achieved when the object is relatively
close to the image sensor. Ideally, the separation between the object
and the sensor's pixels would be at most about one millimeter. &lt;a class="reference external" href="http://innovate.ee.ucla.edu/wp-content/uploads/2016/01/annurev-bioeng-092515-010849.pdf"&gt;This
limit is partly determined by the light source's spatial coherence&lt;/a&gt;,
but also by the fact that high resolution is achieved by recording the
scattered light at very large angles, which is possible only when the
sample is close to the sensor.&lt;/p&gt;
&lt;p&gt;Today I had a bit of free time so I decided to see whether I could
remove the housing that surrounds the Raspberry Pi camera's
sensor. The &lt;a class="reference external" href="https://www.raspberrypi.org/products/camera-module-v2/"&gt;Raspberry Pi Camera Module version 2&lt;/a&gt; sensor is a
Sony IMX219 color chip. Directly above the sensor is a filter, a lens,
and the housing for both of these that prevent me from placing
anything closer than about half a centimeter from the sensor plane. If
I would want to use this camera for the lensless imager, then the
housing would have to go.&lt;/p&gt;
&lt;p&gt;Now, even without the housing the Raspberry Pi camera is not
necessarily the best option for the project because the IMX219 is a
color sensor. This means that there is a Bayer filter over its pixels,
which would cut the resolution of the imager since I would be using a
very narrow band light source. Effectively, only a quarter of the
pixels would be receiving any light. Regardless, I had a spare second
camera and it interfaces well with the Raspberry Pi, so I figured it
would make for a good prototype.&lt;/p&gt;
&lt;p&gt;As you will see, I did slightly damage my sensor, though it seems to
still work. &lt;strong&gt;You can easily ruin your camera module or cut your
finger by following these steps, so proceed at your own risk.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="section" id="step-0-the-raspberry-pi-camera-module-v2"&gt;
&lt;h2&gt;Step 0: The Raspberry Pi Camera Module V2&lt;/h2&gt;
&lt;p&gt;In the picture below you see my Raspberry Pi Camera Module. From
above, you can see the small circular aperture with the lens
immediately behind it. The sensor is inside the small gray rectangular
housing that is attached to the control board by a small ribbon cable
(to its right) and a bit of two-sided sticky foam tape (underneath the
sensor; not visible).&lt;/p&gt;
&lt;img alt="The Raspberry Pi Camera Module V2" class="align-center" src="http://kmdouglass.github.io/images/pi_camera_step0.thumbnail.jpg"&gt;
&lt;/div&gt;
&lt;div class="section" id="step-1-remove-the-main-ribbon-cable"&gt;
&lt;h2&gt;Step 1: Remove the main ribbon cable&lt;/h2&gt;
&lt;p&gt;To make working on the board a bit easier, I removed the white ribbon
cable that attaches the module to the Pi. I did this by pulling on the
black tabs on the two ends of the connecter until the cable is easily
removed. I labeled the sides of the ribbon cable just in case.&lt;/p&gt;
&lt;img alt="Remove the main ribbon cable from the control board" class="align-center" src="http://kmdouglass.github.io/images/pi_camera_step1.thumbnail.jpg"&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-detach-the-sensor-s-ribbon-cable"&gt;
&lt;h2&gt;Step 2: Detach the sensor's ribbon cable&lt;/h2&gt;
&lt;p&gt;Next, I used my finger and thumb nail to remove the small ribbon cable
that attaches the sensor to the control board. I essentially applied a
small torque to the bottom edge of the connector until it just
"popped" up, as seen in the second image below.&lt;/p&gt;
&lt;img alt="The small ribbon cable from the sensor is to the right." class="align-center" src="http://kmdouglass.github.io/images/pi_camera_step2.thumbnail.jpg"&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-remove-the-sensor-from-the-control-board"&gt;
&lt;h2&gt;Step 3: Remove the sensor from the control board&lt;/h2&gt;
&lt;p&gt;In the third step, I used my thumbnail to gently pry the sensor from
the control board. The sensor is attached with some two-sided sticky
tape and may need a few minutes of work to come free.&lt;/p&gt;
&lt;img alt="Pull the sensor off the control board." class="align-center" src="http://kmdouglass.github.io/images/pi_camera_step3.thumbnail.jpg"&gt;
&lt;/div&gt;
&lt;div class="section" id="step-4-remove-the-rectangular-housing"&gt;
&lt;h2&gt;Step 4: Remove the rectangular housing&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;In this step you risk cutting your finger, so please be careful.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The housing around the sensor is glued. To remove it, you will need to
gently work a knife (or, better yet, a thin screw driver) between the
housing and the sensor board, taking care not to let the blade go too
far into the housing and possibly ruining one of the resistors or wire
bonds.&lt;/p&gt;
&lt;img alt="Cut carefully on one side of the housing." class="align-center" src="http://kmdouglass.github.io/images/pi_camera_step4.thumbnail.jpg"&gt;
&lt;p&gt;Once you get a knife between the two, try popping the housing off of
the sensor.&lt;/p&gt;
&lt;img alt="Once the edge is cut, pop the housing off." class="align-center" src="http://kmdouglass.github.io/images/pi_camera_step4b.thumbnail.jpg"&gt;
&lt;p&gt;When I did this I cut on three sides of the housing, but in retrospect
I should have only cut on the side opposite the ribbon cable and pried
the other sides loose. This is because I damaged a small resistor when
the knife blade went too far into the housing. You can see this below
and, at the same time, get an idea of the layout of the sensor board
so you know where you can and can't cut.&lt;/p&gt;
&lt;img alt="The resistor near the top of the board was damaged when cutting the housing." class="align-center" src="http://kmdouglass.github.io/images/pi_camera_step4c.thumbnail.png"&gt;
&lt;p&gt;If you have the normal version of the camera, then you can also find the IR blocking filter
inside the housing.&lt;/p&gt;
&lt;img alt="The IR blocking filter." class="align-center" src="http://kmdouglass.github.io/images/pi_camera_step4d.thumbnail.jpg"&gt;
&lt;p&gt;Fortunately for me the camera still works, despite the damaged
resistor. I can now place samples directly on the sensor if I wanted
to, though the wire bonds from the sensor to its control board appear
quite fragile. For this reason, it may make more sense to build a
slide holder that holds a sample just above the surface without
touching it. For now, I can use this exposed sensor to prototype
different methods for mounting the sample.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>optics</category><category>photonics</category><category>raspberry pi</category><guid>http://kmdouglass.github.io/posts/accessing-the-raspberry-pi-camera-image-sensor/</guid><pubDate>Sat, 26 Aug 2017 21:33:07 GMT</pubDate></item><item><title>Micro-Manager on the Raspberry Pi</title><link>http://kmdouglass.github.io/posts/micro-manager-on-the-raspberry-pi/</link><dc:creator>Kyle M. Douglass</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a class="reference external" href="https://micro-manager.org/"&gt;Micro-Manager&lt;/a&gt; is an open source platform for controlling microscope
hardware, automating image acquisition, and tracking metadata about
how images are acquired. In biomedical imaging research, it serves as
an incredibly important tool because it is free and open source, which
means that scientists can benefit from the contributions of others to
the software without paying costly licensing fees.&lt;/p&gt;
&lt;p&gt;I recently managed to compile Micro-Manager version 2.0 on the
Raspberry Pi. I did this for a small hobby project I am working on to
build a cheap yet effective tool for &lt;a class="reference external" href="https://hackaday.io/project/19677-basic-lensless-imaging-for-low-cost-microscopy"&gt;at-home microscope projects and
hacking&lt;/a&gt;. Though I am not yet convinced that Micro-Manager will be
the best tool for this particular job given it's relatively heavy
footprint on the Pi's slower hardware, I thought that I would post my
notes so that others could benefit from my experience.&lt;/p&gt;
&lt;div class="section" id="software-versions"&gt;
&lt;h2&gt;Software versions&lt;/h2&gt;
&lt;p&gt;I am working with a Raspberry Pi 3 Model B:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pi@raspberrypi:~ $ uname -a &amp;amp; gcc -dumpversion &amp;amp; make -v &amp;amp; ldd --version
Linux raspberrypi 4.4.38-v7+ #938 SMP Thu Dec 15 15:22:21 GMT 2016 armv7l GNU/Linux

pi@raspberrypi:~ $ gcc -dumpversion
4.9.2

pi@raspberrypi:~ $ make -v
GNU Make 4.0

pi@raspberrypi:~ $ ldd --version
ldd (Debian GLIBC 2.19-18+deb8u7) 2.19
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="setup-a-network-share-for-3rd-party-libraries"&gt;
&lt;h2&gt;Setup a network share for 3rd party libraries&lt;/h2&gt;
&lt;p&gt;We need to compile Micro-Manager because binares for the Pi's ARM
processor are not distributed by the Micro-Manager team (probably
because too few people have ever wanted them). To compile
Micro-Manager, we need to checkout a rather large set of 3rd party
libraries. When I last checked, these libraries occupied 6.7 GB of
space on my laptop, a size which can be prohibitive when using the
Micro-SD cards that provide storage for the Pi.&lt;/p&gt;
&lt;p&gt;To circumvent this problem, I checked out the &lt;strong&gt;3rdpartypublic&lt;/strong&gt; SVN
repository onto my laptop and created a network share from this
directory. Then, I mounted the share on my Pi in the directory just
above that containing the Micro-Manager source code.&lt;/p&gt;
&lt;p&gt;To get started, first have a look at my post on connecting a Pi to a
Linux home network for ideas if you haven't already connected the Pi
to your other machines at home:
&lt;a class="reference external" href="http://kmdouglass.github.io/posts/connecting-a-raspberry-pi-to-a-home-linux-network.html"&gt;http://kmdouglass.github.io/posts/connecting-a-raspberry-pi-to-a-home-linux-network.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once the Pi and the laptop are on the same network, checkout the SVN
3rdpartypublic repository onto your laptop or home server. You may
need to do this a few times until completion because the downloads can
timeout after a few minutes:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
svn checkout https://valelab4.ucsf.edu/svn/3rdpartypublic/
&lt;/pre&gt;
&lt;p&gt;Next, we need to setup the network share. If your laptop or server is
running Windows, then you will probably need to setup &lt;a class="reference external" href="https://www.samba.org/samba/what_is_samba.html"&gt;Samba&lt;/a&gt; on the
Pi to share files between them. I however am running a Linux home
network, so I decided to use &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Network_File_System"&gt;NFS&lt;/a&gt; (Network File Sharing) to share
the directory between my laptop--which runs Debian Linux--and the
Pi. I installed NFS on my laptop with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo apt-get install nfs-kernel-server nfs-common
&lt;/pre&gt;
&lt;p&gt;Once installed, I added the following line to the newly created
/etc/exports file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/home/kmdouglass/src/micro-manager/3rdpartypublic 192.168.0.2/24(ro)
&lt;/pre&gt;
&lt;p&gt;The first part is the directory to share, i.e. where the
3rdpartypublic directory is stored on my laptop. The second part
contains the static IP address of the Pi on my home network. The /24
was REQUIRED for my client (the Pi) to mount the share. /24 simply
denotes a network mask of 255.255.255.0; if you have a different mask
on your network, then you can find a good discussion on this topic
here: &lt;a class="reference external" href="https://arstechnica.com/civis/viewtopic.php?t=751834"&gt;https://arstechnica.com/civis/viewtopic.php?t=751834&lt;/a&gt; Finally,
(...)  specifies shared options and &lt;strong&gt;ro&lt;/strong&gt; means read only.&lt;/p&gt;
&lt;p&gt;After editing the file, export the folder and restart the NFS server:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo exportfs -arv
sudo /etc/init.d/nfs-kernel-server restart
&lt;/pre&gt;
&lt;p&gt;On the client (the Pi), the NFS client software was already
installed. However, I had to restart the rpcbind service before I
could mount the share:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo /etc/init.d/rpcbind restart
&lt;/pre&gt;
&lt;p&gt;Finally, I added a line to the &lt;strong&gt;/etc/fstab&lt;/strong&gt; file on the Pi to make
mounting the 3rdpartypublic share easier:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
192.168.0.102:/home/kmdouglass/src/micro-manager/3rdpartypublic /home/pi/src/micro-manager/3rdpartypublic nfs user,noauto 0 0
&lt;/pre&gt;
&lt;p&gt;The first part indicates the IP of the laptop and the share to
mount. The second part, &lt;strong&gt;/home/pi/src/micro-manager/3rdpartypublic&lt;/strong&gt;
is the directory on the Pi where the share will be mounted. I placed
this one directory above where the MM source code is,
(&lt;strong&gt;/home/pi/src/micro-manager/micro-manager&lt;/strong&gt; on my machine). &lt;strong&gt;nfs&lt;/strong&gt;
indicates the type of share to mount, and &lt;strong&gt;user,noauto&lt;/strong&gt; permits any
user to mount the share (not just root), though this share will not be
automatically mounted when the Pi starts. The final two zeros are
explained in the fstab comments but aren't really important for us. To
mount the share, type the following on the Pi:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo mount /home/pi/src/micro-manager/3rdpartypublic
&lt;/pre&gt;
&lt;p&gt;In case you're interested in learning more about the intricacies of
Linux home networking, I found the following sources of information to
be incredibly helpful.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.howtoforge.com/install_nfs_server_and_client_on_debian_wheezy"&gt;https://www.howtoforge.com/install_nfs_server_and_client_on_debian_wheezy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=luqq8DUqqCw"&gt;https://www.youtube.com/watch?v=luqq8DUqqCw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://nfs.sourceforge.net/nfs-howto/ar01s03.html#config_server_setup"&gt;http://nfs.sourceforge.net/nfs-howto/ar01s03.html#config_server_setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.tecmint.com/how-to-setup-nfs-server-in-linux/"&gt;http://www.tecmint.com/how-to-setup-nfs-server-in-linux/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="building-mm"&gt;
&lt;h2&gt;Building MM&lt;/h2&gt;
&lt;p&gt;Once I was able to mount the share containing 3rd party libraries, I
installed the following packages on the Pi and checked out the
Micro-Manager source code:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo apt-get install autoconf automake libtool pkg-config swig ant libboost-dev libboost-all-dev
cd ~/src/micro-manager
git clone https://github.com/micro-manager/micro-manager.git
cd micro-manager
git checkout mm2
&lt;/pre&gt;
&lt;p&gt;The last command switches to the mm2 branch where the Micro-Manager
2.0 source code is found. Note that it may not be necessary to install
all of the boost libraries with &lt;code&gt;sudo apt-get install
libboost-all-dev&lt;/code&gt;, but I did this anyway because I encountered
multiple errors due to missing boost library files the first few times
I tried compiling.&lt;/p&gt;
&lt;p&gt;The next step follows the normal Micro-Manager build routine using
make, with the exception of the configuration step. From inside the
Micro-Manager source code directory on the Pi, run the following
commands one at a time:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
./autogen.sh
PYTHON=/usr/bin/python3 ./configure --prefix=/opt/micro-manager --with-ij-jar=/usr/share/java/ij.jar --with-python=/usr/include/python3.4 --with-boost-libdir=/usr/lib/arm-linux-gnueabihf --with-boost=/usr/include/boost
make fetchdeps
make
sudo make install
&lt;/pre&gt;
&lt;p&gt;In the configuration step, I set the Python interpreter to Python 3
because I greatly prefer it over Python 2. This is done by setting the
&lt;strong&gt;PYTHON&lt;/strong&gt; environment variable before running
configure. &lt;strong&gt;--prefix=/opt/micro-manager/&lt;/strong&gt; indicates the preferred
installation directory of
Micro-Manager. &lt;strong&gt;--with-ij-jar=/usr/share/java/ij.jar&lt;/strong&gt; is the path to
the ImageJ Java library, though I am uncertain whether this was
necessary. (I installed ImageJ with a &lt;code&gt;sudo apt-get install
imagej&lt;/code&gt; a while ago.) &lt;strong&gt;--with-python=/usr/include/python3.4&lt;/strong&gt; should
point to the directory containing the &lt;strong&gt;Python.h&lt;/strong&gt; header file for the
version of Python you are compiling against. &lt;strong&gt;with-boost-libdir&lt;/strong&gt;
should point to the directory containing the boost libraries (.so
files). This was critical for getting MM2 to build. If you are unsure
where they are located, you can search for them with &lt;code&gt;sudo find
/ -name "libboost*"&lt;/code&gt;. Finally, the last option, &lt;strong&gt;with-boost&lt;/strong&gt;, may or
may not be necessary. I set it to the directory containing the boost
headers but never checked to see whether MM compiles without it.&lt;/p&gt;
&lt;p&gt;If all goes well, Micro-Manager will compile and install without
problems. Compilation time on my Pi took around one hour.&lt;/p&gt;
&lt;div class="section" id="set-the-maximum-amount-of-direct-memory"&gt;
&lt;h3&gt;Set the maximum amount of direct memory&lt;/h3&gt;
&lt;p&gt;In the next step, we need to make a minor edit to the Micro-Manager
Linux start script. Edit the script
(/opt/micro-manager/bin/micromanager) to reduce the maximum direct
memory to something reasonable:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/usr/lib/jvm/jdk-8-oracle-arm32-vfp-hflt/bin/java -Xmx1024M \
  -XX:MaxDirectMemorySize=1000G \
   -classpath "$CLASSPATH" \
   -Dmmcorej.library.loading.stderr.log=yes \
   -Dmmcorej.library.path="/opt/micro-manager/lib/micro-manager" \
   -Dorg.micromanager.plugin.path="/opt/micro-manager/share/micro-manager/mmplugins" \
&lt;/pre&gt;
&lt;p&gt;Change 1000G to 512M or 256M; otherwise the Pi will complain that the
MaxDirectMemorySize of 1000G is too large. You can start Micro-Manager
by running this modified script.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Though Micro-Manager compiles and runs on the Pi, I have not yet
tested it thoroughly acquisitions. I am currently waiting on a camera
board to arrive in the mail, and when it does, I will attempt to
interface with it through Micro-Manager. Though I could write my own
Python library, Micro-Manager is appealing because it can save a lot
of time by providing a ready-made means to annotate, process, and
store imaging data.&lt;/p&gt;
&lt;p&gt;Running Micro-Manager on the Pi also raises the possibility of a fully
open, embedded biomedical imaging platform, though I am uncertain at
the moment whether the hardware on the Pi is up to the task. If you
manage to do anything cool with Micro-Manager and the Raspberry Pi,
please let me know in the comments!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>micro-manager</category><category>microscopy</category><category>open source</category><category>raspberry pi</category><guid>http://kmdouglass.github.io/posts/micro-manager-on-the-raspberry-pi/</guid><pubDate>Fri, 10 Feb 2017 18:31:57 GMT</pubDate></item></channel></rss>