#+BEGIN_COMMENT
.. title: Nix Notes
.. slug: nix
.. date: 05/06/2017
.. tags: nix, package manager
.. link: 
.. description: Notes on using Nix, the functional package manager.
.. type: text
#+END_COMMENT
#+OPTIONS: toc:nil num:t ^:nil
#+TOC: headlines 2

* Cheat sheet

** Install/upgrade nix

*Date*: 2017-05-06

*Sources*:
1. https://www.domenkozar.com/2014/01/02/getting-started-with-nix-package-manager/
2. https://nixos.org/nix/

#+BEGIN_SRC
bash <(curl https://nixos.org/nix/install)
#+END_SRC

OR

#+BEGIN_SRC
$ curl https://nixos.org/nix/install | sh
#+END_SRC

-----

*** Error setting certificate verify locations

*Date*: 2017-05-24

*Source*: https://stackoverflow.com/questions/3160909/how-do-i-deal-with-certificates-using-curl-while-trying-to-access-an-https-url

If you get this error while trying to install Nix using curl, install
the *ca-certificates* package via apt-get (or the appropriate package
manager for your system).

If the error persists, verify that ca-certificates.crt is in the
correct location and, if not, create a symlink to it.

Expected location: /etc/pki/tls/certs/ca-bundle.crt
Location on my system: /etc/ssl/certs/ca-certificates.crt

-----
** Activate a nix user profile

#+BEGIN_SRC
source ~/.nix-profile/etc/profile.d/nix.sh
#+END_SRC

-----

** Search for packages

#+BEGIN_SRC
nix-env -qaP | grep python3-3
#+END_SRC

-----

** List all installed packages

#+BEGIN_SRC
nix-env -q
#+END_SRC

** Garbage collect

#+BEGIN_SRC
nix-collect-garbage
#+END_SRC

-----

** Create a shell environment with the jdk package

#+BEGIN_SRC
nix-shell -p jdk
#+END_SRC

The -p argument specifies the packages to include in the environment.

-----

* Python

** Convert pip packages to nix expressions

*Date*: 2017-05-23

*Source*: https://pypi.python.org/pypi/pip2nix

First clone and install pip2nix:

#+BEGIN_SRC
git clone https://github.com/johbo/pip2nix
nix-env -f pip2nix/release.nix -iA pip2nix.python35  # Same Python as target packages
#+END_SRC

Ensure that pythonXX matches the Python version to be used with the
target package.

Next, generate the /python-packages.nix/ file with

#+BEGIN_SRC
pip2nix generate -r requirements.txt
#+END_SRC

where requirements.txt is for the desired package.

-----

* Java

** Packaging Maven projects
*Date*
May 12, 2017

*Sources*
1. https://ww.telent.net/2017/5/10/building_maven_packages_with_nix
2. https://github.com/NixOS/mvn2nix-maven-plugin

*IMPORTANT* Unfortunately, the [[https://github.com/NixOS/mvn2nix-maven-plugin/issues/5][workaround for authenticated]] flag
problem in mvn2nix does not work for me. The directions in this
section might work for you since others have reported success with
it. I decided to install pre-built .jars using nix instead of building
the source.

To use the mvn2nix plugin, you need to have Maven >= 3.2.5. On May
12, 2017, this required installing from jessie-backports on Debian:

#+BEGIN_SRC
sudo apt-get -t jessie-backports install maven
#+END_SRC

Next, generate the project-info.json file that build-maven.nix will
use the Nix expression for your package. To do this, run the following
command from inside the Maven project's root directory.

#+BEGIN_SRC
mvn -Dmaven.repo.local=$(mktemp -d -t mavenXXX) org.nixos.mvn2nix:mvn2nix-maven-plugin:mvn2nix
#+END_SRC

Important note: on my Debian Jessie system, =mktemp= requires at least
three X's appended to the end of the output file, hence the =$(mktemp
-d -t mavenXXX)= above. Alternatively, you can just drop the template
argument altogether.

The output of the above command will be a file named
/project-info.json/. Move this some convenient directory inside your
project's hierarchy, such as =app/=.

-----

** Installing pre-built .jars

Instead of building Java source code, you could get away with simply
installing prebuilt .jars using Nix. Here is a short expression I used
to copy the ImageJ 1.51j .jar file into the Nix store.

#+BEGIN_SRC
with import <nixpkgs> {};

stdenv.mkDerivation {
  name = "ij-1.51j";
  src = (builtins.toPath ./ij-1.51j.jar);
  phases = "installPhase";

  installPhase = ''
    mkdir -p $out/java/share
    cp -v $src $out/java/share/
  '';

  meta = {
    description = "Open source scientific multidimensional image processing";
    homepage = https://imagej.net;
  };
}
#+END_SRC

It's important to specify the =phases= attribute because
=stdenv.mkDerivation= will attempt to run a build phase by
default. This means it will try to run configure, make, make install,
etc. on contents of the =src= attribute. By specifying that we only
want an install phase, we can simply copy the .jar to the store.

-----

* Glossary

The official glossary is located in the Nix documentation here:
http://nixos.org/nix/manual/#idm140737315919056

* Useful Links

+ *Sander van der Burg* :: [[http://sandervanderburg.blogspot.ch/2013/12/using-nix-while-doing-development.html][Description of common development practices with Nix]]
+ *Domen Ko≈æar* :: [[https://www.domenkozar.com/2014/01/02/getting-started-with-nix-package-manager/][A Nix quickstart]]
+ *Jakob Gillich* :: [[https://jakob.gillich.me/post/2016-03-22-self-contained-development-environments-using-nix/][Self-contained development environments using nix]]
+ *Nix Wiki* :: [[https://nixos.org/wiki/Development_Environments][Development environments]]
+ *Nixpkgs Manual* :: [[http://nixos.org/nixpkgs/manual/#sec-language-java][Java]]
