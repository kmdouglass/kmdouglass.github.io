#+BEGIN_COMMENT
.. title: Linux Notes
.. slug: linux
.. date: 12/26/2014
.. tags: linux, debian
.. link:
.. description: Notes I've collected for doing things in Linux
.. type: text
#+END_COMMENT
#+OPTIONS: toc:nil num:t ^:nil
#+TOC: headlines 3

* Notes on Linux
  This page serves as a collection of notes I've made while using
  Linux. It's meant to be a resource to help others and myself when
  performing common tasks in the Linux operating system. Let me know
  if it helps you in any way!

-----  

* Why install Debian?
  For the last five or six years, I have been using Ubuntu at home,
  and sometimes at the office. (I'm writing this in 2014, a few months
  after I finished my PhD studies.) I've liked it quite a bit and
  learned a lot from it because it is a relatively gentle introduction
  to Linux.

  Lately I've become a bored with it however. I also get a vague
  feeling that it's becoming a bit bloated. At home, I mainly use
  emacs, Firefox, Anki (a flashcard program), and Python along with
  its many associated packages. I don't therefore need a large
  operating system. Now, I know that there are lightweight versions of
  Ubuntu, but at this point I'm really just interested in trying
  something else.
  
  So, I decided to give Debian a try. Ubuntu is based on Debian, but
  so far as I can tell Debian has remained closer to the open source
  paradigm. Furthermore, Debian is actively developed and very mature.

-----

* Debian installation from a live USB stick

** Downloading the .iso image files

   /File: debian-live-7.4-amd64-xfce-desktop.iso.torrent/
   /Location: http://cdimage.debian.org/debian-cd/current-live/amd64/bt-hybrid//

   I want to use a light-weight desktop environment. For lack of
   experience in the matter and any strong opinion, I settled on Xfce,
   though Debian also has a flavor that comes with LXDE.

   I downloaded Debian 7.4 live image torrent coupled with the Xfce
   desktop from Debian's site. They recommend using the torrent since
   it reduces load on their servers.

-----

** Copy the .iso file to a USB stick
   
   /Information sources/
   1. https://www.debian.org/releases/stable/amd64/ch04s03.html.en/
   2. https://www.debian.org/CD/faq/#write-usb

   Surprisingly, the first website above suggested that /should/ be
   able boot the image simply by copying it to a USB stick. Of course,
   I have to enable booting from USB in my BIOS.  First, I verified
   the device name of the USB by inserting it and entering the /dmesg/
   command in a shell. The kernel buffer reported detecting the USB
   stick as the latest message. On my machine, it is labeled as
   =/dev/sdb/=.

   #+BEGIN_SRC sh
sudo cp Downloads/debian-live-7.4-amd64-xfce-desktop.iso /dev/sdb; sync
   #+END_SRC   

   Note that sometimes there are multiple devices that appear in
   =/dev/= that relate to your device. For example, in my Ubuntu 12.04
   system, there is a =/dev/sdb= and =/dev/sdb1= even though, to my
   knowledge, only one partition exists. My computer could not load
   the image when it was copied to =/dev/sdb1= but it did boot when
   copied to =/dev/sdb=. You should also be sure that the USB stick is
   not mounted and you should not try to /cp/ to its mount point, such
   as =/media/USB20FS/=.

   Finally, you may need to partition the stick to a FAT16 or FAT32
   file system. I used FAT16.

   I ensured that I was capable of booting from USB in my BIOS by
   pressing /F2/ at the BIOS boot screen (I'm using a Lenovo Ideapad
   Y570.). I enabled USB booting in the /Configuration/ tab and moved
   the USB boot priority over the harddisks in the /Boot/
   tab.

   The computer was capable of booting Debian from the USB stick after
   this.

-----

** Installing Debian
   I used the graphical installer provided by the system on the live
   USB stick. Before doing so, I had repartitioned my harddrive using
   Windows Disk Management. The first three primary partitions were
   the boot partition, the Windows system partition (C:\), and a
   partition that contained software from Lenovo (D:\). The very last
   partition on the harddrive was also placed there by Lenovo and I
   think contains Windows restore files.

   I shrunk the the D:\ volume down to 20 GB in Windows, which was
   more than enough space for the Lenovo software. Then, in the Debian
   installer, I added a 150 GB partion for =/home=, an 8.8 GB swap
   space partition, and finally I allotted 35 GB to =/=. I placed
   these between the partition containing the D:\ volume and the final
   OEM partitions . This left 35 GB free in case I decide to install
   another distribution in the future.

   The rest of the graphical installer worked well, including the
   installation of the [[http://www.gnu.org/software/grub/][Grub]] bootloader. Upon rebooting, the Grub menu
   allowed me to boot into Debian or Windows 7.

-----

* Initial Debian Configuration
  A lot of my initial configuration is of the desktop environment. One
  especially useful set of tips for setting up XFCE is here:
  http://www.binarytides.com/better-fedora-20-xfce/

-----

** List of required software
   I use the following software packages regularly, so they should be
   installed after any fresh OS installation.

   1. emacs (w/org-mode)
   2. Dropbox
   3. Python (w/numpy, scipy, and matplotlib)
   4. Firefox (w/XMarks)
   5. KeepassX
   6. TrueCrypt
   7. Inkscape

-----

** WiFi
  Unfortunately, my wireless card doesn't work without some setup in
  Debian. The drivers for the wireless are non-free, which means that
  they don't adhere to Debian's open source policy.

-----

*** Adding non-free repositories
   /Information sources/
   1. http://forums.debian.net/viewtopic.php?f=10&t=63380
   
   To add non-free repositories to the Debian package manager, I had
   to edit the =/etc/apt/sources.list= file. In this file, there will
   be a lines that correspond to different servers, one of which will
   be the server for the primary packages. At the end of this line, I
   added /non-free/. This should add the non-free packages to
   aptitude's search. There may be other options such as /main/, which
   include the primary packages. These should be left in place.

-----

*** Installing non-free wireless drivers
   /Information sources/
   1. http://www.overclock.net/t/1477672/debian-lenovo-y570-no-wifi-solve
   
   I installed the following packages containing drivers for my
   wireless card: /firmware-brcm80211/ and /iwlwifi/. I've found sites
   that either only one or both are needed, and I'm not sure if I
   really need both.

-----

*** Configuring WiFi
   /Information sources/
   1. http://www.overclock.net/t/1477672/debian-lenovo-y570-no-wifi-solve
   2. https://bbs.archlinux.org/viewtopic.php?pid=1141454
   3. http://forums.debian.net/viewtopic.php?f=5&t=73778

   The following commands are very important for configuring the WiFi
   in Debian. (See source 3 above.)

   + ifconfig :: enables the wireless device
   + iwlist :: lists available wireless access points
   + iwconfig :: configures the wireless connection
   + dhclient :: get an IP address via dhcp
   + ifup :: activiates the wireless interface
   + ifdown :: deactivates the wireless interface

   /iwlist/ is the equivalent of the Windows menu that displays the
   available networks. It also lists other important information
   regarding the nearby wireless networks.

   The =/etc/network/interfaces= file stores wireless networks to
   connect to automatically. In this file, add the following lines to
   add a network:

    #+BEGIN_SRC sh
auto wlan0
iface wlan0 inet dhcp
wpa-ssid mynetwork
wpa-psk password
    #+END_SRC   

   Finally, use the program /rfkill/ to report the identity of the
   hard and soft switches for devices like WiFi. I may need to press a
   Function-F<num> key combination to activate the WiFi as well.

-----

** Installing emacs on Debian
  /Sources/
  1. http://www.emacswiki.org/emacs/EmacsSnapshotAndDebian

  I can get the latest emacs source files from the emacs git
  repository. Use the command

  #+BEGIN_SRC sh
git clone --depth 1 git://git.sv.gnu.org/emacs.git
  #+END_SRC

  to clone the repository. I installed the required packages, then
  built the binaries as instructed. Note that I built emacs in
  =~/opt/emacs-2014-04-13/= and made a symbolic link to the binaries
  for this build in =/usr/bin=.

-----

*** Configuring auto-complete
    /Sources/
    1. http://cx4a.org/software/auto-complete/manual.html#Manual_Installation
    2. http://www.jesshamrick.com/2012/09/18/emacs-as-a-python-ide/

    A long time ago I followed [[http://www.jesshamrick.com/2012/09/18/emacs-as-a-python-ide/][Jess Hamrick's guide]] for configuring
    emacs for Python. This first exposed me to auto-complete, a useful
    tool for automatically completing words as you type them. However,
    I found that its configuration requires a few extra steps to get
    working.

    For one, I manually created the /ac-dict/ file that's mentioned in
    the lines of code that are added to the init.el file. I also found
    that the letters 'AC' must be in the mode-line in Emacs. If
    they're not, type /M-x auto-mode-complete/ to get it working.

-----

** Setting the keyboard layout to international
  Understanding how the keyboard configuration works is one of the
  most mysterious things to me in Linux and Xfce. Fortunately I at
  least determined how to set the keyboard to a US International
  layout. This is important because I live in French-speaking
  Switzerland and frequently need to use a number of accent keys.

  To switch the keyboard, I right-clicked on the desktop to bring up
  the menu. I navigated to =Applications -> Settings -> Keyboard=. In
  this window, I selected the Layout tab. I clicked the "Add" button,
  then selected =English (US) -> English (international AltGr dead
  keys)=, which is my preferred international layout. I also removed
  the original keyboard layout after adding the international one.

-----

** Changing the Caps Lock key to function as Control
   I usually change the Caps Lock key to Control since it makes typing
   in emacs much easier.

   To swap the keys in Xfce, right click on the Desktop and navigate
   to =Applications -> Settings -> Session and Startup=. In window,
   click on the =Application Autostart= tab and click the "Add"
   button.

   In the prompt, enter the following information:

   | Field Name  | Option                                              |
   |-------------+-----------------------------------------------------|
   | Name        | Caps Lock <-> Control                               |
   | Description | Change Caps Lock to Control                         |
   | Command     | /usr/bin/setxkbmap -option '' -option 'ctrl:nocaps' | 

-----

** Running Dropbox on startup
   /Sources/
   1. http://www.ghacks.net/2009/04/04/get-to-know-linux-the-etcinitd-directory/
   2. http://pixeldust.wikidot.com/linode-setup%3adropbox
   3. http://help.directadmin.com/item.php?id=379
   
   For whatever reason, I couldn't seem to get Dropbox to start after
   the system boots through the XFCE GUI. To fix this, I added a
   service script called */etc/init.d/dropbox* that I found at one of
   the sources above. I needed to add the recommended special tags to
   avoid an insserv error. The script looks like this:

   #+BEGIN_SRC
### BEGIN INIT INFO
# Provides:          dropbox
# Required-Start:    $local_fs $network
# Required-Stop:     $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Dropbox
# Description:       Dropbox daemon
### END INIT INFO

# dropbox service
DROPBOX_USERS="kmdouglass"

DAEMON=.dropbox-dist/dropbox

start() {
    echo "Starting dropbox..."
    for dbuser in $DROPBOX_USERS; do
        HOMEDIR=`getent passwd $dbuser | cut -d: -f6`
        if [ -x $HOMEDIR/$DAEMON ]; then
            HOME="$HOMEDIR" start-stop-daemon -b -o -c $dbuser -S -u $dbuser -x $HOMEDIR/$DAEMON
        fi
    done
}

stop() {
    echo "Stopping dropbox..."
    for dbuser in $DROPBOX_USERS; do
        HOMEDIR=`getent passwd $dbuser | cut -d: -f6`
        if [ -x $HOMEDIR/$DAEMON ]; then
            start-stop-daemon -o -c $dbuser -K -u $dbuser -x $HOMEDIR/$DAEMON
        fi
    done
}

status() {
    for dbuser in $DROPBOX_USERS; do
        dbpid=`pgrep -u $dbuser dropbox`
        if [ -z $dbpid ] ; then
            echo "dropboxd for USER $dbuser: not running."
        else
            echo "dropboxd for USER $dbuser: running (pid $dbpid)"
        fi
    done
}

case "$1" in
  start)
    start
    ;;

  stop)
    stop
    ;;

  restart|reload|force-reload)
    stop
    start
    ;;

  status)
    status
    ;;

  *)
    echo "Usage: /etc/init.d/dropbox {start|stop|reload|force-reload|restart|status}"
    exit 1

esac

exit 0
   #+END_SRC

   Next, I ran the following commands:

   #+BEGIN_SRC sh
sudo chmod +x /etc/init.d/dropbox 
sudo update-rc.d dropbox defaults
   #+END_SRC

   The first command ensures that the script can be executed, and I
   believe that the second creates the symlinks to the script in the
   appropriate run-level folders inside */etc/*.

-----

** Remove the XFCE bottom panel
   I don't like how much space the XFCE bottom panel takes up, so I
   removed it by right-clicking on the desktop and navigating to
   *Applications -> Settings -> Panel*. I selected *Panel 2* from
   drop-down list and clicked the Minus sign. A dialog appeared asking
   if I really wanted to remove the lower panel.

-----
** Installing Flash
   /Information sources/
   1. https://wiki.debian.org/FlashPlayer

   I installed Adobe Flash by adding "contrib" to the list of primary
   repositories in =/etc/apt/sources.list=. Then I ran the commands

  #+BEGIN_SRC sh
sudo apt-get update
sudo apt-get install flashplugin-nonfree
  #+END_SRC

   After a browser restart, I could see Flash videos on webpages.

-----

** Playing DVD's in VLC
   Most DVD's are write-protected and need a special package to play
   in VLC on Linux. This package is called *libdvdcss2* in Debian.

-----
** Activating the Firefox Java Plugin
   /Sources/
   1. http://www.oracle.com/technetwork/java/javase/manual-plugin-install-linux-136395.html

   To enable Java in Firefox, I first installed the runtime
   environment by downloading it from Oracle's website. (I downloaded
   the 64 bit Java SE 8u20 tar file.) After unpacking the file, I
   created a symbolic link from
   *~/src/jre1.8.0_11/lib/amd64/libnpjp2.so* to
   *~/.mozilla/plugins/libnpjp2.so*.

   Next, I restarted Iceweaseal (Debian's Firefox) and navigated to
   /Tools->Add-ons->Plugins/ to ensure that the Java plugin appeared
   and was set to "Always Activate."

   One final step was to decrease the security level of the JRE. This
   was accomplished with the Java Control Panel, which is located in
   ~/src/jre1.8.0_11/bin/. Had I not done this, pratically no applet
   would run.

-----
** Latex installation
   /Sources/
   1. https://wiki.debian.org/Latex
   2. http://askubuntu.com/questions/296638/texlive-cant-find-wrapfig-sty-while-package-is-installed

   Latex is easily installed with *sudo apt-get install texlive* and
   *sudo apt-get install texlive-latex-extra*.

-----
** Automatic Backups with rsync and cron
   /Sources/
   1. http://www.howtogeek.com/135533/how-to-use-rsync-to-backup-your-data-on-linux/
   
   rsync is a very good command line backup tool for performing
   incremental backups. (Note that it works for Windows, though the
   creators make no guarantees as to how well it will work.)

   I can backup my important data using the following command:

  #+BEGIN_SRC sh
rsync -av --delete /Directory1/ /Directory2/
  #+END_SRC

   This command will copy everything in Directory1 recursively,
   including symlinks, permissions, etc. into Directory2 (the
   a-flag). If files are found in Directory2 that are not in
   Directory1, they will be deleted (the --delete flag). -v means the
   output will be verbose for logging purposes.

   I setup daily backups with the Linux job scheduler cron. To use
   emacs to edit the cron file, I used the command

  #+BEGIN_SRC sh
env EDITOR=emacs crontab -e
  #+END_SRC
 
   The /env EDITOR=emacs/ part let me use EMACS and not vi, whereas
   the /crontab -e/ part is used to edit the crontab file.

   Finally, I added the following line in the crontab file to schedule
   my backup everyday at 1:00 PM when I'm normally at lunch:


  #+BEGIN_SRC
0 13 * * * rsync -av --delete /Directory1/ /Directory2
  #+END_SRC

   -----
* Monitor settings
** Dual monitors
   /Sources/
   1. http://askubuntu.com/questions/62681/how-do-i-setup-dual-monitors-in-xfce

   I have two monitors at work and I set them up in XFCE according to
   the website listed above.

   I first entered the command *xrandr* in the terminal to determine
   what the monitors were named. Next, I entered the following command
   to enable the setting in which one monitor was continuation of
   another.

   #+BEGIN_SRC sh
 xrandr --output MONITOR1 --left-of MONITOR2
   #+END_SRC

   The names MONITOR1 and 2 should be replaced with the names returned
   from the xrandr command.

   I also set this command to run at start up in /Applications ->
   Settings -> Session and Startup/.

-----
** Screen brightness
   /Sources/
   1. http://askubuntu.com/questions/149054/how-to-change-lcd-brightness-from-command-line-or-via-script

   I can also use /xrandr/ to change the screen brightness. Simply use
   the command /xrandr --output DP-2 --brightness 0.7/ to set the
   brightness to 70% of the monitor labeled DP-2. To find the monitor
   labels, simply type /xrandr/.

-----

* Python setup

** Compiling Python 3.4
   /Sources/
   1. http://www.linuxfromscratch.org/blfs/view/svn/general/python3.html
   2. http://stackoverflow.com/questions/22592686/compiling-python-3-4-is-not-copying-pip

   Note before compiling: the *libssl-dev* package should be installed
   for pip to work, and *libsqlite3-dev* should be installed for
   IPython History. *tk8.5* and *tk8.5-dev* should be installed if you
   later want to use Tk in matplotlib. Finally, *libbz2-dev* should
   already be installed to ensure that Python has access to the bz2
   headers.

   I installed Python 3.4 with the following commands:

   #+BEGIN_SRC sh
CXX="/usr/bin/g++" \./configure --prefix=/usr --enable-shared --with-system-expat --with-system-ffi --with-ensurepip=install
make
   #+END_SRC

   Next, run the following commands as root:

   #+BEGIN_SRC sh
make install
chmod -v 755 /usr/lib/libpython3.4m.so
chmod -v 755 /usr/lib/libpython3.so
   #+END_SRC

   For the doc files, download the Python HTML documentation from
   here: https://docs.python.org/3.4/download.html. Install it using:

   #+BEGIN_SRC sh
install -v -dm755 /usr/share/doc/python-3.4.0/html
tar --strip-components=1 --no-same-owner --no-same-permissions -C /usr/share/doc/python-3.4.0/html -xvf ../python-3.4.0-docs-html.tar.bz2
   #+END_SRC

   In ~/.profile, add the line
   *PYTHONDOCS="/usr/share/doc/python-3.4.0/html/"; export PYTHONDOCS*
   to the bottom of the file to set the *PYTHONDOCS* environment
   variable.

   Finally, I removed */usr/bin/python* and created a symbolic link to
   Python3.4 so that it would run as the default:

   #+BEGIN_SRC sh
sudo rm /usr/bin/python
sudo ln -s /usr/bin/python3.4 /usr/bin/python
   #+END_SRC

-----

** Installing IPython 2.0
   /Sources/
   1. http://ipython.org/install.html
   2. http://stackoverflow.com/questions/14173271/warning-ipython-history-requires-sqlite-your-history-will-not-be-saved

   IPython 2.0 can be installed using pip. The command to run with
   Python3 is actually *pip3*. Use the *[notebook]* option if you also
   want to install the [[http://ipython.org/notebook.html][IPython notebook]] as well.

   #+BEGIN_SRC sh
sudo pip3 install ipython[notebook]
   #+END_SRC

   When I ran IPython the first time, I received the following
   messages:

   #+BEGIN_SRC
WARNING: IPython History requires SQLite, your history will not be saved
WARNING: Readline services not available or not loaded.
WARNING: The auto-indent feature requires the readline library
   #+END_SRC

   I fixed the readline errors by running *sudo pip3 install
   readline*. However, I had to rebuild Python3 with the package
   *libsqlite3-dev* installed to get rid of the sqlite error.
   
-----
   
*** IPython Notebook
    The IPython notebook required that I install *libzmq* with apt-get
    and *pyzmq* with pip3.
-----

*** Fixing indentation errors
    /Source/
    1. http://stackoverflow.com/questions/10920562/ipython-emacs-indentationerror

    I've been receiving some indentation errors in IPython. These are
    more-or-less fixed by turning off *autoindent* in IPython. To do
    this, I first created the default IPython configuration files by
    running

    #+BEGIN_SRC sh
ipython profile create
    #+END_SRC

   Following this, I edited
   *~/.ipython/profile_default/ipython_config.py*. I uncommented the
   line about *autoindent* and set the argument to *False*. This fixed
   the indentation errors.

-----

** Installing Numpy 1.8.1, matplotlib 1.3.1, scipy 0.14, and Pillow 2.4.0
   Numpy 1.8.1 can be installed with pip3. Before doing so, I first
   ATLAS with *sudo apt-get install libatlas-base-dev*. Next, I
   downloaded the Numpy source and unzipped it.

   matplotlib and Pillow are also easily installed with pip3. Before
   installing scipy, be sure that there is a Fortran compiler on your
   system, such as *gfortran*.

-----

** Multiple IPython prompts at startup
   The reasons for the multiple prompts appearing the start of Ipython
   in emacs is given [[http://lists.gnu.org/archive/html/help-gnu-emacs/2014-05/msg00061.html][in this disccusion]].

-----

** Getting Tk and Latex support in Python
   The first time I built Python, I did not have *tk8.5* or
   *tk8.5-dev* installed. This prevented me from creating plots with
   matplotlib. So, I recompiled Python after installing these
   packages.

   I believe that I will also have to rebuild matplotlib in the future
   if I want Latex support.

-----

** Installing Jedi
   /Sources/
   1. http://tkf.github.io/emacs-jedi/latest/
   2. https://github.com/davidhalter/jedi

   Jedi is a Python autocomplete tool for emacs that I had some
   trouble installing at first. In the end, I think the problem was
   with an old version on the Maramelade emacs package server.

   I first installed the following Python packages using pip3 like
   normal: /sudo pip3 install <PACKAGE>/.

   + jedi
   + epc
   + virtualenv
   + argparse (I'm not sure if this one's necessary; I saw it on a
     forum when I was troubleh shooting.)

   This only installs the Jedi library for Python and a few other
   Python modules. To install Jedi for emacs I used el-get since the
   version it installed was up-to-date. (When I tried to install from
   the Marmalade repo using package.el, the repository version was
   0.1.2, but the current version of jedi is 0.2.0.) To install
   el-get, I added the following lines to init.el:

   #+BEGIN_SRC emacs-lisp
; Standard el-get setup
; (See also: https://github.com/dimitri/el-get#basic-setup)
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
    (goto-char (point-max))
    (eval-print-last-sexp)))

(el-get 'sync)
   #+END_SRC

   Next, I ran init.el using /M-x load-file/. I watched the *Messages*
   buffer during this time to watch for when the el-get install
   finished (it takes a few minutes). After it had installed and I
   restarted emacs for good measure, I ran the command /M-x
   el-get-install RET jedi RET/. Again, I waited until it finished,
   then ran the command /M-x jedi:install-server RET/. This command is
   missing in 0.1.2.

   Finally, I added the following lines to init.el, restarted emacs,
   and had a working jedi install.

   #+BEGIN_SRC emacs-lisp
;; Standard Jedi.el setting
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)
   #+END_SRC

-----

* Org-mode configuration
** Publish to LaTeX with references
   /Sources/
   1. http://tex.stackexchange.com/questions/197707/using-bibtex-from-org-mode-bbl-and-aux-files-are-incorrectly-generated

   I found a recent and excellent post to the TeX Stack Exchange
   concerning getting org-mode to faithfully create bibliographies in
   pdf's published from LaTeX. This task has been notoriously
   difficult for me in the past.

   In brief, I installed the texlive-bibtex-extra and latexmk packages
   from the Debian repositories to assemble my tools. Next, I used the
   minimal example from the Stack Exchange link and modified it
   slightly:

   #+BEGIN_SRC
#+LATEX_HEADER: \usepackage{fullpage}
#+LATEX_HEADER: \usepackage[backend=bibtex,sorting=none]{biblatex}
#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \addbibresource{telomeres.bib}

#+TITLE: Telomere Master Notes
#+AUTHOR: Kyle M. Douglass
#+DATE: \today

Telomeres consist of DNA tandem repeat sequences, their associated
binding proteins, and a non-coding RNA transcript. They are located at
the end of chromosomes and address two important problems in
eukaryotes: the end-replication problem and the end-protection
problem. A nice summary is provided in \cite{sfeir-jcellsci-2012}.

\printbibliography
   #+END_SRC

   Finally, I changed my original init.el file by modifying
   *org-latex-pdf-process* to the following:

   #+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process
  '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f"))
   #+END_SRC

   This was changed from what I had used in the past:

   #+BEGIN_SRC emacs-lisp
(setq org-latex-to-pdf-process '("pdflatex -interaction nonstopmode %b"
                                 "/usr/bin/bibtex %b"
                                 "pdflatex -interaction nonstopmode %b"
                                 "pdflatex -interaction nonstopmode %b"))
   #+END_SRC

   Now, publishing to pdf with Latex and including citations works
   well.
-----

* CIFS
  I use CIFS to access my network shares at work, some of which come
  from Windows servers.

** CIFS installation
   It's easy. /sudo apt-get install cifs-utils/
-----

** Accessing Windows shares remotely
   /Sources/
   1. https://wiki.ubuntu.com/MountWindowsSharesPermanently
  
   First, I created a credentials file with my Windows username and
   password called *~/.smbcredentials*. It contained the lines

   #+BEGIN_SRC sh
username=USERNAME
password=PASSWORD
   #+END_SRC

   with the obvious substitutions. I changed the read/write
   credentials using *chmod 600 ~/.smbcredentials*.

   Next, I created a mount point for the network share at
   */mnt/LEB-Z*. I then added the following line to */etc/fstab*

   #+BEGIN_SRC sh
//SERVERIP/LEB /mnt/LEB-Z cifs credentials=/home/kmdouglass/.smbcredentials,iocharset=utf8,sec=ntlm,noauto 0 0
   #+END_SRC
   
   The *noauto* parameter ensures that the share is not mounted at
   startup or with the *sudo mount -a* command. To mount the share, I
   enter the command *sudo mount /mnt/LEB-Z*.

-----

** fstab options for mounting shares as a user

   The method described above will mount the CIFS share as root, which
   means you're user account won't be able to access the files and
   directories.

   To get around this, I modified the fstab line as such:

   #+BEGIN_SRC sh
//SERVERIP/LEB /mnt/LEB-Z cifs credentials=/home/kmdouglass/.smbcredentials,iocharset=utf8,sec=ntlm,uid=1000,gid=1000,noauto 0 0
   #+END_SRC

   UID and GID are user and group id numbers for the user of
   interest. These can be obtained with *id -u username* and *id -g
   username*.

   After mounting the share, the ownership still needs to be
   changed. This is done with the command

   #+BEGIN_SRC sh
sudo chown -R user:user /mnt/LEB-Z
   #+END_SRC

   where user is the username that belongs to the UID.

-----
* Booting from a bootloader on a USB stick
  I ran into some issues installing Debian on my work computer, which,
  I suspect, was due to a crazy partition scheme. I inherited this
  computer from someone else and can't change the harddrive layout, so
  I've been attempting to work around it.

  Luckily, there was a 500 GB chunk of free space at the end of one
  hard drive, so I decided to install Debian Wheezy there. I booted
  into a Live CD and ran the installer. Unfortunately, the install
  hung while searching for the other operating systems on the computer
  to setup Grub. So after waiting an hour, I manually restarted the
  computer.

  Fortunately, the MBR was untouched so the computer started as if
  nothing had ever happened to it. Windows also worked fine. I could
  also see what appeared to be the full file system for Debian
  installed at the parition I put it in. Rather than risk botching the
  MBR, I thought I would try installing [[http://www.gnu.org/software/grub/][GRUB]] onto a USB stick and
  using it to boot to the new installation.

-----

** Installing GRUB onto a USB stick
   /Sources/
   1. http://www.pendrivelinux.com/install-grub2-on-usb-from-ubuntu-linux/
   2. http://www.dedoimedo.com/computers/grub-2.html
   3. http://current.workingdirectory.net/posts/2009/grub-on-usb/

   I first booted into Linux with my Debian Live CD. After inserting a
   spare USB stick, I loaded a terminal window and typed *sudo su* to
   get a root prompt. Next, I checked which device the USB stick was
   labeled as by inspecting the output of *fdisk -l*. I mounted the
   stick with *mkdir /mnt/USB && mount /dev/sdX /mnt/USB*. (Replace
   'X' with the device label, usually a letter and a number).

   Next, I installed GRUB to the MBR of this USB stick by typing this
   important command:

   #+BEGIN_SRC sh
grub-install --force --no-floppy --boot-directory=/mnt/USB/boot /dev/sdX
   #+END_SRC

   (Again, X should be replaced with the appropriate device label.)
   This installed GRUB to the USB for what would be the live
   system. The next step involves configuring GRUB to boot the
   stranded Linux install.

-----

** Configuring GRUB on the USB stick to work with your machine
   /Sources/
   1. http://askubuntu.com/questions/145241/how-do-i-run-update-grub-from-a-livecd

   After installing GRUB to the USB stick, it's necessary to change
   /boot/grub/grub.cfg on the USB to reflect your machine's
   hardware. This is made easy with the command *grub-update* and a
   Live CD.

   After booting into the live CD environment, I mounted the stranded
   partition to /mnt/linux. Next, I loaded some necessary directories
   from the running live instances into the newly mounted partition.

   #+BEGIN_SRC sh
sudo mount --bind /dev /mnt/linux/dev
sudo mount --bind /sys /mnt/linux/sys
sudo mount --bind /proc /mnt/linux/proc
   #+END_SRC

   Next I *chroot*'ed into the partition with *sudo chroot
   /mnt/linux*. I next ran

   #+BEGIN_SRC sh
sudo update-grub
   #+END_SRC

   which generated the grub.cfg file on the current partition. I
   copied this to /boot/grub in my USB stick, rebooted the computer,
   and successfully loaded the stranded partition from the bootloader
   on the USB stick.

