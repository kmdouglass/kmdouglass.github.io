Setup network share for 3rdpartypublic
======================================

Sources:

1. https://www.howtoforge.com/install_nfs_server_and_client_on_debian_wheezy
2. https://www.youtube.com/watch?v=luqq8DUqqCw
3. http://nfs.sourceforge.net/nfs-howto/ar01s03.html#config_server_setup
4. http://www.tecmint.com/how-to-setup-nfs-server-in-linux/

First, install nfs on the server::

  sudo apt-get install nfs-kernel-server nfs-common

Once installed, edit the newly created /etc/exports file::

  /home/kmdouglass/src/micro-manager/3rdpartypublic 192.168.0.2/24(ro)

The first part is the directory to share, the second part is address
of the machine who will use the file. (...) specifies shart options
and **ro** means read only. **NOTE** The /24 was REQUIRED for my
client (the Pi) to mount the share.

After editing the file, export the folder and restart the NFS server::
  
  sudo exportfs -arv
  sudo /etc/init.d/nfs-kernel-server restart

On the client, be sure to restart the rpcbind service::

  sudo /etc/init.d/rpcbind restart

Building MM
===========

Packages to install::

  sudo apt-get install autoconf automake libtool pkg-config swig
  sudo apt-get install ant libboost-dev libboost-all-dev

Configure command::

  PYTHON=/usr/bin/python3 ./configure --prefix=/opt/micro-manager --with-ij-jar=/usr/share/java/ij.jar --with-python=/usr/include/python3.4 --with-boost-libdir=/usr/lib/arm-linux-gnueabihf --with-boost=/usr/include/boost

**with-boost-libdir** should point to the directory containing the
 boost libraries (.so files). This was critical for getting MM2 to
build.

Set the maximum direct memory
+++++++++++++++++++++++++++++

Edit the MM start script (/opt/micro-manager/bin/micromanager) to
reduce the maximum direct memory to something reasonable::

  /usr/lib/jvm/jdk-8-oracle-arm32-vfp-hflt/bin/java -Xmx1024M \
    -XX:MaxDirectMemorySize=1000G \
     -classpath "$CLASSPATH" \
     -Dmmcorej.library.loading.stderr.log=yes \
     -Dmmcorej.library.path="/opt/micro-manager/lib/micro-manager" \
     -Dorg.micromanager.plugin.path="/opt/micro-manager/share/micro-manager/mmplugins" \

Change 1000G to 512M or 256M.
  
ImageJ source install
=====================

As it turns out, this isn't entirely necessary, since ImageJ is in the
Raspbian repos.

Download and install Maven
++++++++++++++++++++++++++

I followed the directions from here:
https://www.xianic.net/post/installing-maven-on-the-raspberry-pi/

1. Go to http://maven.apache.org/download.cgi and find the lastest
version of Maven.
2. Copy and the link to the .tar.gz binary file.
3. Download the file with :code:`wget
   http://mirror.switch.ch/mirror/apache/dist/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz`
   and move it to /opt.
4. Unpack it inside /opt with :code:`tar -xvzf
   apache-maven-3.3.9-bin.tar.gz`
5. Edit **/etc/profile.d/maven.sh** and add the lines::

  export M2_HOME=/opt/apache-maven-3.3.9
  export PATH=$PATH:$M2_HOME/bin
6. Test the installation with :code:`mvn -version`

Download the ImageJ source code
+++++++++++++++++++++++++++++++

From a terminal window, you may clone the ImageJ source code
repository into the current directory by typing the following command
into the terminal::

  git clone https://github.com/imagej/imagej.git

Once Maven is installed, navigate to the top-level directory of the
ImageJ source code and run the command::

  mvn

Running ImageJ, however, is a bit strange::

  mvn -Pexec

from inside the ImageJ source directory.

Misc.
=====

Check out MiniMaven for a lightweight version of Maven:
http://imagej.net/MiniMaven

ImageJ is also in the Raspbian package repositories.

If installing ImageJ from the repos, we can decrease the default
memory usage via editing the correct line in the **imagej** shell
script in **/usr/bin**::

  sudo nano /usr/bin/imagej

Change the memory by editing the line::

  declare -i default_mem=500

The units for the memory are in megabytes.
